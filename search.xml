<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web-APIs-学习笔记（第二天）</title>
      <link href="/Parade001.github.io/2021/10/20/Web-APIs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/20/Web-APIs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web APIs 学习笔记（第一天）</title>
      <link href="/Parade001.github.io/2021/10/20/Web-APIs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/20/Web-APIs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-的组成"><a href="#JavaScript-的组成" class="headerlink" title="JavaScript 的组成"></a>JavaScript 的组成</h1><ul><li><strong>ECMAScript</strong></li><li><em><em>DOM</em>(文档对象模型)</em>**</li><li><em><em>BOM</em>(浏览器对象模型)</em>**</li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h2><p><em>appliction programming interface</em>应用程序编程接口，是一些预先定义的函数.</p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><p>是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM）；</p><p>web编程（浏览器的网页编程）；</p><p>一般都有输入和输出（函数的传参和返回值）,Web Api 很多方法（函数）；</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><em>Document Object Model</em>（文档对象模型）</p><p>W3C推荐的处理可扩展标记语言，是一种标准编程接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文档：docunment</span><br><span class="line">元素：标签</span><br><span class="line">节点：属性，空格，注释...</span><br></pre></td></tr></table></figure><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><ul><li>根据ID*( getElementById)*</li><li>根据标签名*(getElementByTagName)* 返回一个包括所有给定标签名称的元素的 HTML 集合<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection"><code>HTMLCollection</code></a>。 整个文件结构整体被搜索，包括根节点。返回的 <code>HTML集合</code>是动态的，可以自动更新自己来保持和 DOM 树的同步而不用再次调用 <code>document.getElementsByTagName()</code> 。</li><li>通过标签的NAME属性值获取一组节点集合*(getElementByName)*</li><li>通过指定的上下文或按照class名取指定的标签，获取的是一个<strong>元素集合</strong> <em>（getElementClassName）</em></li><li>使用类名选择器获取<em>（doucument.querySelector(‘选择器’)）</em>  返回值永远是一个DOM对象,即使可以匹配多个,以第一匹配的为准,获取不到就是null</li><li>在指定上下文中通过选择器获取一组元素集合(<strong>伪数组+=不能使用数组的内置方法</strong>),返回值:永远是一个伪数组,即使可以匹配1个这个伪数组长度为1,元素是真正的DOM*（document.querySelectorAll(‘选择器’))*获取不到就是空元（<strong>通过数组方法取元素</strong>）</li><li><em>(doucument.body)</em>      body属性用于设置或返回文档体</li><li>*(doucument.doucumentElement)*以一个元素对象返回一个文档的文档元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2021-10-20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> times = <span class="built_in">document</span>.getElementById(<span class="string">&quot;time&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(times);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> times);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.dir(times); <span class="comment">//打印返回的元素对象 查看里面的属性和方法</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取DOM元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;time&quot;</span>&gt;<span class="number">2021</span>-<span class="number">10</span>-<span class="number">20</span>&lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>第1天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;toy&#x27;</span>&gt;</span>第2天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;toy&#x27;</span>&gt;</span>第3天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;toy&#x27;</span>&gt;</span>第4天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第5天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第6天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第7天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第8天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第9天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第10天学习js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> times = <span class="built_in">document</span>.getElementById(<span class="string">&quot;time&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(times);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> times);</span><br><span class="line">        <span class="built_in">console</span>.dir(times);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis); <span class="comment">//返回值永远是伪数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;toy&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">&quot;li&quot;</span>);  <span class="comment">//他只要一个</span></span><br><span class="line">        <span class="built_in">console</span>.log(lis); <span class="comment">//&lt;li class=&quot;one&quot;&gt;第1天学习js&lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>) <span class="comment">//CSS选择器,得到的是伪数组,容器里装的是DOM</span></span><br><span class="line">        <span class="built_in">console</span>.log(lis); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.body);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.documentElement);</span><br></pre></td></tr></table></figure><p>元素的属性获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;百度&lt;/a&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">       btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           a.href = <span class="string">&#x27;https://parade001.github.io/&#x27;</span>;</span><br><span class="line">           a.innerHTML = <span class="string">&#x27;My_blog&#x27;</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><ul><li>事件源(触发对象)</li><li>事件类型(触发类型)</li><li>事件处理程序(通过函数赋值完成)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;猜猜我是谁?&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      // var btn = document.getElementsByTagName(&#x27;button&#x27;)[0]; //[0]因为...bytagname返回的是一个伪数组</span><br><span class="line">      // btn.onclick = function () &#123;</span><br><span class="line">      //     alert(&#x27;我是大傻逼&#x27;);</span><br><span class="line">      // &#125;</span><br><span class="line"></span><br><span class="line">      var btn = document.querySelectorAll(&#x27;button&#x27;)[0];</span><br><span class="line">      btn.onclick = function () &#123;</span><br><span class="line">          alert(&#x27;你是狗&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>赋值操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;今天是雨天&lt;/div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>记得带伞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">      btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          div.innerHTML = <span class="string">&quot;&lt;span style=color:red&gt;爪巴啊&lt;/span&gt;&quot;</span></span><br><span class="line">          <span class="comment">// div.innerText = &quot;&lt;span style=color:red&gt;爪巴啊&lt;/span&gt;&quot;// interHTMl可以识别网页元素标签,innerText则不行;</span></span><br></pre></td></tr></table></figure><p>操作元素的deemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;当前时间为:&lt;/button&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.innerText = getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> year = date.getFullYear();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> dates = date.getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> day = date.getDay();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="string">&#x27;今天是:&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日&#x27;</span> + arr[day];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        p.innerText = getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>通过更改路径达到更换图片的deemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ldh&#x27;</span>)</span><br><span class="line">      <span class="keyword">var</span> zxy = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zxy&#x27;</span>)</span><br><span class="line">      <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">      zxy.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          img.src = <span class="comment">// 图片路径 ; //通过更改路径更换图片;</span></span><br><span class="line">              img.title = <span class="string">&#x27;张学友&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ldh.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          img.src = <span class="comment">// 图片路径;</span></span><br><span class="line">              img.title = <span class="string">&#x27;刘德华&#x27;</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>京东密码框表单元素的deemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     .box input &#123;</span><br><span class="line">            <span class="attr">width</span>: 370px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            border: none;</span><br><span class="line">            outline: none;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .input_style &#123;</span><br><span class="line">            <span class="attr">color</span>: #aaa;</span><br><span class="line">            border: 1px solid #d9d9d9;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .input_text_focus &#123;</span><br><span class="line">            <span class="attr">border</span>: 1px solid #ffd6db;</span><br><span class="line">            color: #<span class="number">888</span>;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box &#123;</span><br><span class="line">            <span class="attr">margin</span>: 100px auto;</span><br><span class="line">            width: 500px;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            border-radius: 15px 15px 15px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;邮箱/ID/手机号&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input_style&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#ccc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        input.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (<span class="built_in">this</span>.value === <span class="string">&#x27;邮箱/ID/手机号&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.value = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.className = <span class="string">&#x27;input_style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.color = <span class="string">&#x27;Cyan&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        input.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (<span class="built_in">this</span>.value === <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.value = <span class="string">&#x27;邮箱/ID/手机号&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.className = <span class="string">&#x27;input_style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.color = <span class="string">&#x27;#9999&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Web API输入框焦点deemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        .box input &#123;</span><br><span class="line">            <span class="attr">width</span>: 370px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            border: none;</span><br><span class="line">            outline: none;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .input_style &#123;</span><br><span class="line">            <span class="attr">color</span>: #aaa;</span><br><span class="line">            border: 1px solid #d9d9d9;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .input_text_focus &#123;</span><br><span class="line">            <span class="attr">border</span>: 1px solid #ffd6db;</span><br><span class="line">            color: #<span class="number">888</span>;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box &#123;</span><br><span class="line">            <span class="attr">margin</span>: 100px auto;</span><br><span class="line">            width: 500px;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            border-radius: 15px 15px 15px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;邮箱/ID/手机号&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input_style&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#ccc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        input.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.value = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.className = <span class="string">&#x27;input_style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        input.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (<span class="built_in">this</span>.value == <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.className = <span class="string">&#x27;input_style&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.value = <span class="string">&#x27;邮箱/ID/手机号&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>关闭广告的deemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  .box &#123;</span><br><span class="line">            <span class="attr">position</span>: relative;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box img &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">            height: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box .close &#123;</span><br><span class="line">            <span class="attr">position</span>: absolute;</span><br><span class="line">            right: <span class="number">0</span>;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box .stop &#123;</span><br><span class="line">            <span class="attr">width</span>: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box .stop img &#123;</span><br><span class="line">            <span class="attr">width</span>: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;../img/luzhou.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;stop&quot;&gt;&lt;img src=&quot;../img/close.jpg&quot; alt=&quot;&quot; class=&quot;close&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var btn = document.querySelector(&#x27;.stop&#x27;);</span><br><span class="line">        var box = document.querySelector(&#x27;.box&#x27;);</span><br><span class="line">        btn.onclick = function () &#123;</span><br><span class="line">            box.style.display = &#x27;none&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>下拉菜单的案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .baba &#123;</span><br><span class="line">            <span class="attr">display</span>: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            background: #ccc;</span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li a &#123;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .sow &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .cow &#123;</span><br><span class="line">            <span class="attr">display</span>: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baba&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>weibo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&#x27;sow&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;cow&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;cow&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;cow&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;cow&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;cow&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> baba = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.baba&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> lis = baba.children;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            lis[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.children[<span class="number">1</span>].style.display = <span class="string">&#x27;block&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            lis[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.children[<span class="number">1</span>].style.display = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>背景颜色关灯案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            <span class="attr">color</span>: red;</span><br><span class="line">            margin-top: 50px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>天黑请关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> flag = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                body.style.backgroundColor = <span class="string">&quot;#000&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                flag = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                body.style.backgroundColor = <span class="string">&quot;#fff&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                flag = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（第七天）</title>
      <link href="/Parade001.github.io/2021/10/20/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%83%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/20/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%83%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h1><p>JS运行机制分为2步</p><p>1、预解析</p><p>2、执行代码</p><p>预解析：在当前作用域下,js运行之前，会把带有var和function关键字的事先声明，并在内存中安排好。 然后再从上到下执行js语句。 <strong>预解析只会发生在通过var定义的变量和function（不是表达式式的function）上</strong>。如果内存中存在该变量名var，则忽略这个操作；预解析function时会将函数名和函数相绑定，如果有，则会在内存不开辟空间，但是函数体的地址会覆盖原函数体。通过var关键字定义的变量进行预解析的时候：都是<strong>声明declare，不管它有没有赋值，都会赋值undefined</strong>。</p><p>预解析分为</p><ul><li><strong>变量预解析（变量提升）</strong></li><li><strong>函数预解析（函数提升）</strong></li></ul><p>变量提升：将所有的变量声明提升到当前的作用域最前面，不提升赋值操作</p><p>函数提升：将所有的函数声明提升到当前的作用域的最前面，不调用函数</p><p>注意：进入函数体也会有预解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>（！a)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;           </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(a);  <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fnn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>)</span>&#123;  <span class="comment">//var num = undefined=&gt;456</span></span><br><span class="line">    conlose.log(num); <span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">    f1(); </span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">//456</span></span><br><span class="line">    num = <span class="number">456</span>;</span><br><span class="line">    f1();</span><br><span class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//456</span></span><br><span class="line">&#125;</span><br><span class="line">f2();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123; <span class="comment">//var a = 100; a相当于一个局部变量；</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//100</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123; <span class="comment">// var a = 100</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// 打印函数体</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    a();  <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（第六天）</title>
      <link href="/Parade001.github.io/2021/10/19/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/19/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>JavaScript </p><p>原型模式:</p><p>​    1.理解原型:在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象</p><p>原型对象</p><p>原型链</p><p>this 既不指向函数自身也不指向函数的词法作用域，抛开以前错误的假设和理解。<br>this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用（也就是函数的调用方法）。</p><p>调用栈想象成一个函数调用链，就像我们在前面代码段的注释中所写的一样。但是这种方法非常麻烦并且容易出错。另一个查看调用栈的方法是使用浏览器的调试工具。绝大多数现代桌面浏览器都内置了开发者工具，其中包含 JavaScript 调试器。就本例来说，你可以在工具中给 foo() 函数的第一行代码设置一个断点，或者直接在第一行代码之前插入一条 debugger;语句。运行代码时，调试器会在那个位置暂停，同时会展示当前位置的函数调用列表，这就是你的调用栈因此，如果你想要分析 this 的绑定，使用开发者工具得到调用栈，然后找到栈中第二个元素，这就是真正的调用位置。</p><p> this 的默认绑定指向全局对象</p><p>使用严格模式（strict mode），则不能将全局对象用于默认绑定，因此 this 会绑定到undefined：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记 (第五天)</title>
      <link href="/Parade001.github.io/2021/10/15/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/Parade001.github.io/2021/10/15/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（第四天）</title>
      <link href="/Parade001.github.io/2021/10/14/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/14/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript数据类型检测"><a href="#JavaScript数据类型检测" class="headerlink" title="JavaScript数据类型检测"></a>JavaScript数据类型检测</h1><h3 id="typeof-或-typeof"><a href="#typeof-或-typeof" class="headerlink" title="typeof   或  typeof()"></a>typeof   或  typeof()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof 10);   //number</span><br><span class="line">console.log(typeof(10));  //number</span><br><span class="line"></span><br><span class="line">console.log(typeof &#x27;abc&#x27;); //string</span><br><span class="line">console.log(typeof(abc));  //string</span><br><span class="line"></span><br><span class="line">console.log(typeof true);  //boolean</span><br><span class="line">console.log(typeof(false));//boolean</span><br><span class="line"></span><br><span class="line">console.log(typeof undefined)  //undefined</span><br><span class="line"></span><br><span class="line">console.log(typeof null)  //object</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var num = 10</span><br><span class="line">var name = &#x27;leeo&#x27;</span><br><span class="line">var a = false</span><br><span class="line">var b</span><br><span class="line">console.log(typeof num)</span><br><span class="line">console.log(typeof name)</span><br><span class="line">console.log(typeof a)</span><br><span class="line">console.log(typeof b)</span><br><span class="line">// isNaN ture 为数字 flase 非数字</span><br></pre></td></tr></table></figure><h4 id="遍历数组返回最大值"><a href="#遍历数组返回最大值" class="headerlink" title="遍历数组返回最大值"></a>遍历数组返回最大值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(num1, num2, num3);</span><br><span class="line">            <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                    max = arr[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入第一个数:&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入第二个数:&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> num3 = prompt(<span class="string">&#x27;请输入第三个数:&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = myFunction(num1, num2, num3);</span><br><span class="line">        alert(<span class="string">&#x27;最大值为:&#x27;</span> + result);</span><br></pre></td></tr></table></figure><h4 id="三元表达式求3个数最大值"><a href="#三元表达式求3个数最大值" class="headerlink" title="三元表达式求3个数最大值"></a>三元表达式求3个数最大值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getArrMax() &#123;</span><br><span class="line">           var num1 = parseInt(prompt(&#x27;请输出第一个数字:&#x27;));</span><br><span class="line">           var num2 = parseInt(prompt(&#x27;请输出第二个数字:&#x27;));</span><br><span class="line">           var num3 = parseInt(prompt(&#x27;请输出第三个数字:&#x27;));</span><br><span class="line">           return num1 &gt; num2 ? (num1 &gt; num3 ? num1 : num3) : (num2 &gt; num3 ? num2 : num3);</span><br><span class="line">       &#125;</span><br><span class="line">       alert(getArrMax());</span><br></pre></td></tr></table></figure><h4 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(arr) &#123;</span><br><span class="line">           var newArray = [];</span><br><span class="line">           for (var i = arr.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">               newArray[newArray.length] = arr[i];</span><br><span class="line">           &#125;</span><br><span class="line">           return newArray;</span><br><span class="line">       &#125;</span><br><span class="line">       var sort = myFunction([&#x27;teng&#x27;, &#x27;baba&#x27;, &#x27;yetu&#x27;, &#x27;xiong&#x27;]);</span><br><span class="line">       console.log(sort);</span><br></pre></td></tr></table></figure><h4 id="while弹窗翻转"><a href="#while弹窗翻转" class="headerlink" title="while弹窗翻转"></a>while弹窗翻转</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> name = prompt(<span class="string">&#x27;请输入数字&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> nameArray = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">while</span> (name != <span class="literal">null</span> &amp;&amp; name != <span class="string">&#x27;&#x27;</span> &amp;&amp; nameArray.length &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                name = prompt(<span class="string">&#x27;请输入数字&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                nameArray.push(name);</span><br><span class="line">            &#125;</span><br><span class="line">            nameArray.sort(<span class="function"><span class="keyword">function</span> <span class="title">compareFunction</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> param1 - param2;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = nameArray.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                alert(nameArray[i] + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        myFunction();</span><br></pre></td></tr></table></figure><h4 id="判断数组是否有素数"><a href="#判断数组是否有素数" class="headerlink" title="判断数组是否有素数"></a>判断数组是否有素数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入一个数:&quot;</span>));</span><br><span class="line">            <span class="keyword">var</span> isPrime = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                    isPrime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPrime == <span class="number">1</span>) &#123;</span><br><span class="line">                alert(<span class="string">&#x27;是素数&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&#x27;不是素数&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        myFunction();</span><br></pre></td></tr></table></figure><h4 id="简易的计算机deemo"><a href="#简易的计算机deemo" class="headerlink" title="简易的计算机deemo"></a>简易的计算机deemo</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRes</span>(<span class="params">num1, symbol, num2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (symbol) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(num1) + <span class="built_in">parseInt</span>(num2));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(num1) - <span class="built_in">parseInt</span>(num2));</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(num1) * <span class="built_in">parseInt</span>(num2));</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="built_in">parseInt</span>(num1) / <span class="built_in">parseInt</span>(num2));</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="string">&#x27;运算符输入错误&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入一个数&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> symbol = prompt(<span class="string">&#x27;请输入运算符&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入一个数&#x27;</span>);</span><br><span class="line">        alert(<span class="string">&#x27;结果为：&#x27;</span> + getRes(num1, symbol, num2));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记(第三天)</title>
      <link href="/Parade001.github.io/2021/10/13/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/Parade001.github.io/2021/10/13/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h1><p><strong>1.概念</strong></p><p>将相同的业务逻辑封装起来，重复</p><p><strong>2.语法</strong>**</p><ul><li><p>函数的声明(声明式/匿名式)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    console.log(&quot;我是声明式的函数&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var fn = function()&#123;</span><br><span class="line">    console.log(&quot;我是表达式式的函数&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><p>表达式式（匿名式） 函数也是一种数据类型</p></li></ul><p><strong>3.函数的调用</strong></p><p>用JS编程语言创建你的hello world</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunction</span>(<span class="params">参数<span class="number">1</span>，参数<span class="number">2.</span>..</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MyFunction(参数<span class="number">1</span>，参数<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure><p><strong>4.返回值</strong></p><p>函数可以有返回值，也可以没有返回值，根据业务逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo(name)&#123;</span><br><span class="line">    return name+&quot;,请问图书馆怎么走？&quot;   // return 返回值</span><br><span class="line">&#125;</span><br><span class="line">var res = foo(&quot;学姐&quot;)</span><br><span class="line">console.log(res)</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>1.return 可以终止函数的执行，return后面可以不跟 数据</p><p>2.如果函数没有return 默认返回就是undefined</p><p>5.<em><strong>作用域</strong></em></p><p>概念：代码（变量）起作用效果的区间范围(负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限)用域是根据名称查找变量的一套规则。实际情况中，通常需要同时顾及几个作用域。<br>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止</p><p>分类：全局作用域   局部作用域</p><p>重点：es6之前只有函数的{}才有限定作用域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var c;</span><br><span class="line">       var changStuff = function (a, b, c) &#123;</span><br><span class="line">           a = a * 10;</span><br><span class="line">           b.item = &quot;changed&quot;;</span><br><span class="line">           c = &#123;</span><br><span class="line">               item: &quot;changed&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       var num = 10;</span><br><span class="line">       var obj1 = &#123;</span><br><span class="line">           item: &quot;unchanged&quot;</span><br><span class="line">       &#125;;</span><br><span class="line">       var obj2 = &#123;</span><br><span class="line">           item: &quot;unchanged&quot;</span><br><span class="line">       &#125;;</span><br><span class="line">       changStuff(num, obj1, obj2);</span><br><span class="line">       console.log(num);</span><br><span class="line">       console.log(obj1.item);</span><br><span class="line">       console.log(obj2.item);</span><br><span class="line">       console.log(c);</span><br></pre></td></tr></table></figure><p>思考上面其中返回值。</p><p><strong>6.执行上下文与作用域链条</strong></p><p>执行上下文（以下简称“上下文”）的概念在 JavaScript 中是颇为重要的。变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。<br>全局上下文是最外层的上下文</p><p>​    上下文在其所有代码都执行完毕后会被销毁，包括定义在它上面的所有变量和函数（全局上下文在应用程序退出前才会被销毁，比如关闭网页或退出浏览器）。<br>每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript程序的执行流就是通过这个上下文栈进行控制的。<br>​    上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域链的最前端。</p><p>​    如果上下文是函数，则其活动对象（activation object）用作变量对象。活动对象最初只有一个定义变量：arguments。（全局上下文中没有这个变量。）作用域链中的下一个变量对象来自包含上下文，再下一个对象来自再下一个包含上下文。以此类推直至全局上下文；全局上下文的变量对象始终是作用域链的最后一个变量对象。<br>代码执行时的标识符解析是通过沿作用域链逐级搜索标识符名称完成的。搜索过程始终从作用域链的最前端开始，然后逐级往后，直到找到标识符。（如果没有找到标识符，那么通常会报错。） </p><h1 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h1><p>JS对象是一组无序的相关属性和方法的集合</p><p>创建对象的方式</p><ul><li>使用 Object构造函数</li><li>对象字面量</li><li>工厂模式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">            o.name = name;</span><br><span class="line">            o.age = age;</span><br><span class="line">            o.job = job;</span><br><span class="line">            o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> person1 = createPerson(<span class="string">&quot;叶灿&quot;</span>, <span class="number">20</span>, <span class="string">&quot;长方体移动工程师&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> person2 = createPerson(<span class="string">&quot;洒洒&quot;</span>, <span class="number">20</span>, <span class="string">&quot;混世大魔王&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(createPerson(person1))</span><br><span class="line">        <span class="built_in">console</span>.log(createPerson(person2))</span><br><span class="line"><span class="comment">//工厂模式</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\xt_xi\my_blog\my_blog\blog\pic\Snipaste_2021-10-19_22-59-57.png"></p><p>这里，函数 createPerson()接收 3 个参数，根据这几个参数构建了一个包含 Person信息的对象。</p><p>可以用不同的参数多次调用这个函数，每次都会返回包含 3 个属性和 1 个方法的对象。这种工厂模式虽<br>然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Myfunction</span>(<span class="params">name, gender, age, skill</span>) </span>&#123; <span class="comment">// Myfunction 构造函数泛指某一大类封装的是对象</span></span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.gender = gender;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.skill = skill;</span><br><span class="line">            <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span> (<span class="params">good</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;爱好&#x27;</span> + good);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sings = <span class="keyword">new</span> Myfunction(<span class="string">&#x27;叶灿&#x27;</span>, <span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;火山C&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(sings);</span><br><span class="line">        sings.sing(<span class="string">&quot;KTV里摸摸唱唱绅士&quot;</span>);</span><br><span class="line">        <span class="comment">//使用 Object构造函数</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\xt_xi\my_blog\my_blog\blog\pic\Snipaste_2021-10-19_23-07-06.png" alt="Snipaste_2021-10-19_23-07-06"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">        obj.username = &#x27;叶灿&#x27;;</span><br><span class="line">        obj.age = 20;</span><br><span class="line">        obj.gender = &#x27;男&#x27;;</span><br><span class="line">        obj.skill = &#x27;搬钢筋&#x27;;</span><br><span class="line">        obj.sayHi = function () &#123;</span><br><span class="line">            console.log(&#x27;土木工程给爷速度爪巴啊！！！！！！！ &#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(obj.username);</span><br><span class="line">        console.log(obj.gender);</span><br><span class="line">        obj.sayHi();</span><br><span class="line">        //使用 Object构造函数</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xt_xi\my_blog\my_blog\blog\pic\Snipaste_2021-10-19_23-07-52.png" alt="Snipaste_2021-10-19_23-07-52"></p><ul><li>没有显式地创建对象。</li><li>属性和方法直接赋值给了 this。</li><li>没有 return。<br>另外，要注意函数名 Person的首字母大写了。按照惯例，构造函数名称的首字母都是要大写的，</li></ul><p>对象字面量**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wtf = &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;洒洒&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">            <span class="attr">sayLove</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Do you love me?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(wtf.username);</span><br><span class="line">        <span class="built_in">console</span>.log(wtf[<span class="string">&#x27;age&#x27;</span>]); <span class="comment">//关联数组的语法</span></span><br><span class="line">        <span class="comment">// 调用对象的方法sayHi 对象名.方法名()</span></span><br><span class="line">        wtf.sayLove();</span><br><span class="line">        <span class="comment">//对象字面量</span></span><br></pre></td></tr></table></figure><p>函数deemo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getMax(a, b) &#123;</span><br><span class="line">           if (a &gt; b) &#123;</span><br><span class="line">               return a;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               return b</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return a &gt; b ? a : b;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       var res = getMax(4, 6)</span><br><span class="line">       console.log(res);//利用函数求两个数的最大值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function getMax(a, b, c) &#123;</span><br><span class="line">          if (a &gt; b) &#123;</span><br><span class="line">              //a大于b</span><br><span class="line">              if (a &gt; c) &#123;</span><br><span class="line">                  return a</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  return c</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              //b大于a</span><br><span class="line">              if (b &gt; c) &#123;</span><br><span class="line">                  return b</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  return c</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          return a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c)</span><br><span class="line">      &#125;</span><br><span class="line">      var res = getMax(19, 10, 3)</span><br><span class="line">      console.log(res);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">            var name = prompt(&#x27;请输入用户名:&#x27;)</span><br><span class="line">            var key = prompt(&#x27;请输入密码:&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        while (name != &#x27;user&#x27; || key != &#x27;123456&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        alert(&#x27;登录成功&#x27;);</span><br><span class="line">        //do while实现验证框登录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">            var name = prompt(&#x27;请输入用户名:&#x27;)</span><br><span class="line">            var key = prompt(&#x27;请输入密码:&#x27;)</span><br><span class="line">            if (name != &#x27;user&#x27; || key != &#x27;123456&#x27;) &#123;</span><br><span class="line">                alert(&#x27;用户名不存在或者密码错误&#x27;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(&#x27;登录成功&#x27;);</span><br><span class="line">        // while实现验证框登录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//过滤掉0</span><br><span class="line">       var arr = [0, 323, 323, 0, 33, 0, -32, 0]</span><br><span class="line">       var newArr = []</span><br><span class="line">       for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">           if (arr[i] !== 0) &#123;</span><br><span class="line">               newArr[i] = arr[i]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       console.log(newArr)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 计算0 - 100 整数和, 个位数为3跳过</span><br><span class="line">        var str = 0</span><br><span class="line">        for (var i = 1; i &lt;= 100; i++) &#123;</span><br><span class="line">            if (i % 10 !== 3) &#123;</span><br><span class="line">                str += i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(str);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0</span><br><span class="line">      var i = 1</span><br><span class="line">      while (i &lt;= 100) &#123;</span><br><span class="line">          if (i % 10 == 3) &#123;</span><br><span class="line">              i++</span><br><span class="line">              continue</span><br><span class="line">          &#125;</span><br><span class="line">          sum += i</span><br><span class="line">          i++</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(sum);</span><br></pre></td></tr></table></figure><p>求数组最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [232, 3232, 4554, 5454, 12313]</span><br><span class="line">       var max = arr[0]</span><br><span class="line">       for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">           if (arr[i] &gt; max) &#123;</span><br><span class="line">               max = arr[min]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       console.log(max)</span><br></pre></td></tr></table></figure><p>求数组最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [322, 232, 2313, -323, 232, 324, -43434]</span><br><span class="line">       var min = arr[0]</span><br><span class="line">       for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">           if (arr[i] &lt; min) &#123;</span><br><span class="line">               min = arr[i]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       console.log(min)</span><br></pre></td></tr></table></figure><p>数组内分割字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;orange&#x27;, &#x27;pink&#x27;, &#x27;red&#x27;, &#x27;cyan&#x27;]</span><br><span class="line">      var str = &#x27;&#x27;</span><br><span class="line">      for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">          str += arr[i] + &#x27;|&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(str)</span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><h5 id="Math-数学"><a href="#Math-数学" class="headerlink" title="Math  数学"></a>Math  数学</h5><p>属性：Math.PI  </p><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.最大值</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>)  <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Math.max() 不能求数组的最大值</span></span><br><span class="line"><span class="built_in">Math</span>.max([<span class="number">3</span>,<span class="number">65</span>,<span class="number">76</span>,<span class="number">2</span>,<span class="number">9</span>])   <span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//求数组的最大值解决方案，后期学</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,[<span class="number">3</span>,<span class="number">65</span>,<span class="number">76</span>,<span class="number">2</span>,<span class="number">9</span>])   <span class="comment">//76</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">3</span>,<span class="number">65</span>,<span class="number">76</span>,<span class="number">2</span>,<span class="number">9</span>])  <span class="comment">//76</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.求绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.abs(-<span class="number">1</span>)    <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span>)     <span class="comment">//1</span></span><br><span class="line"><span class="comment">//3.向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.3</span>) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.9</span>) <span class="comment">//1</span></span><br><span class="line"><span class="comment">//4.向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.2</span>)  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.9</span>)  <span class="comment">//2</span></span><br><span class="line"><span class="comment">//5.四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">1.1</span>)  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">1.8</span>)  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">Math</span>.round(-<span class="number">1.1</span>) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">Math</span>.round(-<span class="number">1.5</span>) <span class="comment">//1   负数时,  .5往大了取整</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.取随机数  [0,1)   从0到1,包括0，不包括1</span></span><br><span class="line"><span class="built_in">Math</span>.random()</span><br><span class="line"><span class="comment">//获取两个数之间的整数，包括两个整数的算法</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值 </span></span><br></pre></td></tr></table></figure><h5 id="Date-日期"><a href="#Date-日期" class="headerlink" title="Date 日期"></a>Date 日期</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()  <span class="comment">//获取当天时间对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021-4-17&#x27;</span>)   <span class="comment">//取参数时间对象</span></span><br><span class="line"><span class="comment">//date不好用</span></span><br><span class="line"></span><br><span class="line">date.getFullYear()  <span class="comment">//年</span></span><br><span class="line">date.getMonth()+<span class="number">1</span>   <span class="comment">//月份    注意date.getMonth()要加1才能得到正确的月份</span></span><br><span class="line">date.getDate()      <span class="comment">//日期</span></span><br><span class="line">date.getDay()       <span class="comment">//星期几   注意date.getDay()得到的值是[0-6]  星期日是0</span></span><br><span class="line"></span><br><span class="line">date.getHours()     <span class="comment">//时</span></span><br><span class="line">date.getMinutes()   <span class="comment">//分</span></span><br><span class="line">date.getSeconds()   <span class="comment">//秒</span></span><br></pre></td></tr></table></figure><p><strong>时间戳：</strong></p><p>解释：从1970年1月1日 到 一个时间点 经过了多少毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：valueOf  getTime</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()    <span class="comment">//从1970年1月1日 到 现在 经过了多少毫秒</span></span><br><span class="line">cosole.log(date.valueOf())</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2： +new Date</span></span><br><span class="line"><span class="keyword">var</span> date = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2000-01-01&#x27;</span>) <span class="comment">//从1970年1月1日 到 &#x27;2000-01-01&#x27; 经过了多少毫秒</span></span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3： Date.now()   //从1970年1月1日 到 现在 经过了多少毫秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例:计算从你出生到现在活了多少天?</span></span><br><span class="line"><span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">var</span> birthTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2001-3-20&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">Math</span>.ceil((nowTime-birthTime)/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例：倒计时效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">// 返回的是用户输入未来时间的总毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h5><p><strong>1.数组类型检测</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);  <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arr 是否是 Array的实例</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>2.数组元素的添加与删除</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push  在数组的后面添加元素</span></span><br><span class="line"><span class="number">1.</span>修改了原数组</span><br><span class="line"><span class="number">2.</span>参数：追加的元素</span><br><span class="line"><span class="number">2.</span>返回值：是追加后数组的长度</span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.push(<span class="number">4</span>,<span class="number">5</span>)    <span class="comment">//返回值是5   原数组变成了[1,2,3,4,5]</span></span><br><span class="line">arr.push([<span class="number">4</span>,<span class="number">5</span>])  <span class="comment">//返回值是4   原数组变成了[1,2,3,[4,5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//unshift  在数组的前面追加元素</span></span><br><span class="line"><span class="number">1.</span>修改了原数组</span><br><span class="line"><span class="number">2.</span>参数：追加的元素</span><br><span class="line"><span class="number">2.</span>返回值：是追加后数组的长度</span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.unshift(<span class="number">4</span>,<span class="number">5</span>)   <span class="comment">//返回值是5   原数组变成了[4,5,1,2,3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pop  删除数组的最后一个元素</span></span><br><span class="line"><span class="number">1.</span>修改了原数组</span><br><span class="line"><span class="number">2.</span>参数：无</span><br><span class="line"><span class="number">2.</span>返回值：删除的那个元素</span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.pop()   <span class="comment">//返回值是3   原数组变成了[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shift 删除数组的第一个元素</span></span><br><span class="line"><span class="number">1.</span>修改了原数组</span><br><span class="line"><span class="number">2.</span>参数：无</span><br><span class="line"><span class="number">2.</span>返回值：删除的那个元素</span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.shift()   <span class="comment">//返回值是1   原数组变成了[2,3]</span></span><br></pre></td></tr></table></figure><p><strong>3.数组的反转</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组.reverse()  反转数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">//[4,3,2,1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4.数组的排序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组.sort()     数组排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b    <span class="comment">//数组升序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">//[2,4,8,9,12]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a -b    <span class="comment">//数组降序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)   <span class="comment">//[12，9，8，4，2]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.数组的索引</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据元素找下标   indexOf()    lastIndexOf()  </span></span><br><span class="line"><span class="comment">//indexOf()   从数组的左边向右边找，找到一个就马上返回下标   没有找到返回-1</span></span><br><span class="line"><span class="comment">//lastIndexOf()   从数组的右边向左边找，找到一个就马上返回下标   没有找到返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">3</span>))      <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">8</span>))      <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">3</span>))  <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">7</span>))      <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例 数组去重</span></span><br><span class="line"><span class="comment">//方案1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(newArr.indexOf(arr[i])===-<span class="number">1</span>)&#123;</span><br><span class="line">        newArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案2   暂时了解   可以关注数组的includes方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!newArr.includes(arr[i]))&#123;</span><br><span class="line">        newArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案3  暂时了解   可以关注数组的reduce方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc,value,index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!acc.includes(value))&#123;</span><br><span class="line">        acc.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure><p><strong>6.数组转换为字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组.join()</span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> str = arr.join()</span><br><span class="line"><span class="built_in">console</span>.log(str)   <span class="comment">//1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = arr.join(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)   <span class="comment">//1&amp;2&amp;3</span></span><br></pre></td></tr></table></figure><p><strong>7.数组合并</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组.concat()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr);    <span class="comment">//没有修改原数组</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p><strong>8.数组的截取</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组.slice(start,end)   </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);     <span class="comment">//[&#x27;blue&#x27;,&#x27;yellow&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);        <span class="comment">//没有修改原数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组.splice(start,count)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.splice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);     <span class="comment">//[&#x27;blue&#x27;,&#x27;yellow&#x27;,&#x27;pink&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);        <span class="comment">//原数组修改了，截取后剩下的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//面试题</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;小泷&quot;</span>,<span class="string">&#x27;刘虎&#x27;</span>,<span class="string">&quot;小苍&quot;</span>,<span class="string">&quot;小泽&quot;</span>,<span class="string">&quot;xiaosa&quot;</span>];  <span class="comment">//=&gt; [[&quot;小泷&quot;,&#x27;刘虎&#x27;,&quot;小苍&quot;],[&quot;小泽&quot;,&quot;xiaosa&quot;]]</span></span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    newArr.push(arr.splice(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><h5 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h5><p><strong>1.根据字符找索引</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str.indexOf()  从左向右根据字符找索引，如果没有找到就返回-1</span></span><br><span class="line"><span class="comment">//str.lastIndexOf()  从右向左根据字符找索引，如果没有找到就返回-1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.根据索引找字符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str.charAt(索引)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求字符串&#x27;abcaba&#x27;出现次数最多的字符及次数</span></span><br><span class="line"><span class="comment">// &#x27;abcaba&#x27; =&gt; (a 3)</span></span><br><span class="line"><span class="comment">// 第一步：&#x27;abcaba&#x27; =&gt; &#123;a:3,b:2,c:1&#125;</span></span><br><span class="line"><span class="comment">// 第二步：&#123;a:3,b:2,c:1&#125; =&gt; a 3</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcaba&quot;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.charAt(i) <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        obj[str.charAt(i)]++     <span class="comment">//obj.a++   num++</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[str.charAt(i)] = <span class="number">1</span>   <span class="comment">//&#123;a:1,b:1,c:1&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="keyword">var</span> char = <span class="literal">null</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;   <span class="comment">//&#123;a:3,b:2,c:1&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (obj[k] &gt; max) &#123;</span><br><span class="line">        max = obj[k]</span><br><span class="line">        char = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`出现次数最多的字符是<span class="subst">$&#123;char&#125;</span>,次数是<span class="subst">$&#123;max&#125;</span>`</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.截取</strong></p><p>  替换指定的字符，如：g替换为22,ss替换为b等操作方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = <span class="string">&quot;dsdsdsdsdsadfdsf&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arry.substring(<span class="number">0</span>, <span class="number">3</span>));  <span class="comment">//不包含end所在位置</span></span><br><span class="line">       <span class="comment">// 利用indexOf查找</span></span><br><span class="line"> <span class="keyword">while</span> (arry.indexOf(<span class="string">&#x27;d&#x27;</span>) !== -<span class="number">1</span>) &#123;  <span class="comment">//当找到该元素是执行花括弧内语句</span></span><br><span class="line">           <span class="keyword">var</span> arry = arry.replace(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arry);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr(start,length) <span class="comment">// 从start开始，截取length个字符串；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.替换 </p><p>利用正则表达式替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = <span class="string">&quot;dsdsdsdsdsadfdsf&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arry.replace(<span class="regexp">/dsd/g</span>, <span class="string">&#x27;dnf&#x27;</span>)); <span class="comment">//dnfsdnfsdsadfdsf</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;我喜欢吃柠檬233239090opkjiooj&#x27;</span>;</span><br><span class="line"> <span class="keyword">while</span> (str.indexOf(<span class="string">&#x27;o&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">           str = str.replace(<span class="string">&#x27;o&#x27;</span>, <span class="string">&quot;丫&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(str);<span class="comment">//我喜欢吃柠檬233239090丫pkji丫丫j</span></span><br></pre></td></tr></table></figure><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><ol><li>理解原型<br>无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor 的属性，指回与之关联的构造函数。</li></ol><p>在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象</p><ul><li><p>正常的原型链都会终止于 Object 的原型对象</p></li><li><p>Object 原型的原型是 null</p></li></ul><p>通过hasOwnProperty()方法用于确定某个属性是在实例上还是在原型对象上。这个方法是继承自 Object的，会在属性存在于调用它的对象实例上时返回 true，如下面的例子所示： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>; </span><br><span class="line">Person.prototype.job = <span class="string">&quot;Software Engineer&quot;</span>; Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);  </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false </span></span><br><span class="line">person1.name = <span class="string">&quot;Greg&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Greg&quot;，来自实例 </span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name); <span class="comment">// &quot;Nicholas&quot;，来自原型 </span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="keyword">delete</span> person1.name; </span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Nicholas&quot;，来自原型 </span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="comment">//在这个例子中，通过调用 hasOwnProperty()能够清楚地看到访问的是实例属性还是原型属性。</span></span><br><span class="line"><span class="comment">//调用 person1.hasOwnProperty(&quot;name&quot;)只在重写 person1上 name 属性的情况下才返回 true，表</span></span><br><span class="line">明此时 name 是一个实例属性，不是原型属性</span><br></pre></td></tr></table></figure><h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><h3 id="arguments属性"><a href="#arguments属性" class="headerlink" title="arguments属性"></a>arguments属性</h3><p>arguments（是个类数组对象，而不是一个数组）</p><ul><li>callee</li><li>length</li><li>Symbol</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//我们可以看到arguments还有属性callee，length和迭代器Symbol</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;tom&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="attr">name</span>:<span class="string">&#x27;lee&#x27;</span>&#125;); </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>)); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;cat&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="arguments使用"><a href="#arguments使用" class="headerlink" title="arguments使用"></a>arguments使用</h3><p>函数在调用的时候，浏览器每次都会传递两个隐式参数：</p><ul><li><p>函数的上下文对象this</p></li><li><p>封装实参的对象arguments</p><p>1.在任意函数内部都有一个看不见的arguments，除了箭头函数外</p><p>2.arguments是一个长的像数组的伪数组，可以对它进行遍历</p><p>3.函数调用的实参变成了arguments的元素</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function getSum() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for (var i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">        sum += arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">console.log(getSum(1, 2)); //3</span><br><span class="line">console.log(getSum(1, 2, 3));//6</span><br><span class="line">console.log(getSum(1, 2, 3, 4));//10</span><br><span class="line">console.log(getSum(1, 2, 5, 6));//14</span><br><span class="line"></span><br><span class="line">getSum(1, 2);</span><br><span class="line">getSum(1, 2, 3);</span><br><span class="line">getSum(1, 2, 3, 4);</span><br><span class="line">getSum(1, 2, 5, 6);</span><br><span class="line">//js是一种弱类型的语言，没有重载机制，当我们重写函数时，会将原来的函数直接覆盖，这里我们能利用arguments，来判断传入的实参类型与数量进行不同的操作，然后返回不同的数值。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（第二天）</title>
      <link href="/Parade001.github.io/2021/10/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/"/>
      <url>/Parade001.github.io/2021/10/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h1><p>在 JavaScript中，几乎所有的事物都是对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var car = &quot;Fiat&quot;;</span><br></pre></td></tr></table></figure><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><h3 id="“JavaScript-对象是变量的容器”"><a href="#“JavaScript-对象是变量的容器”" class="headerlink" title="“JavaScript 对象是变量的容器”"></a>“JavaScript 对象是变量的容器”</h3><p>通常认为 “JavaScript 对象是键值对的容器”。<br>键值对通常写法为 name : value (键与值以冒号分割)。<br>键值对在 JavaScript 对象通常称为 对象属性。</p><h2 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h2><p>通过两种方式访问对象属性:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.lastName;</span><br><span class="line">person[&quot;lastName&quot;];</span><br></pre></td></tr></table></figure><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p>对象的方法定义了一个函数，并作为对象的属性存储。<br>对象方法通过添加 () 调用 (作为一个函数)。<br>该实例访问了 person 对象的 fullName() 方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = person.fullName();</span><br></pre></td></tr></table></figure><p>如果你要访问 person 对象的 fullName 属性，它将作为一个定义函数的字符串返回：实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = person.fullName;</span><br></pre></td></tr></table></figure><h2 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h2><p>你可以使用以下语法 <strong>创建对象</strong> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methodName : function() &#123;</span><br><span class="line">// 代码&#125;</span><br><span class="line"></span><br><span class="line">objectName.methodName()</span><br></pre></td></tr></table></figure><h1 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h1><p><strong>JS中的<code>Array</code>可以包含任意数据类型</strong>，并通过索引来访问每个元素。</p><p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br><span class="line">arr.length; // 6</span><br></pre></td></tr></table></figure><p>直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr.length; // 3</span><br><span class="line">arr.length = 6;</span><br><span class="line">arr; // arr变为[1, 2, 3, undefined, undefined, undefined]</span><br><span class="line">arr.length = 2;</span><br><span class="line">arr; // arr变为[1, 2]</span><br></pre></td></tr></table></figure><p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">arr[1] = 99;</span><br><span class="line">arr; // arr现在变为[&#x27;A&#x27;, 99, &#x27;C&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line"></span><br><span class="line">//当new array 有2个以上的参数，表示的是数组的元素</span><br></pre></td></tr></table></figure><p>计算数组所有元素和与平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,3,4,6,7,8]</span><br><span class="line">var sum = 0</span><br><span class="line">var ave =0</span><br><span class="line">for(var i = 0 ; i&lt;arr.length;i++)&#123;</span><br><span class="line">sum += arr [i]</span><br><span class="line">&#125;</span><br><span class="line">ave = sum /arr.length</span><br><span class="line">console.log(sum.ave)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请注意*，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr[5] = &#x27;x&#x27;;</span><br><span class="line">arr; // arr变为[1, 2, 3, undefined, undefined, &#x27;x&#x27;]</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>与String类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [10, 20, &#x27;30&#x27;, &#x27;xyz&#x27;];</span><br><span class="line">arr.indexOf(10); // 元素10的索引为0</span><br><span class="line">arr.indexOf(20); // 元素20的索引为1</span><br><span class="line">arr.indexOf(30); // 元素30没有找到，返回-1</span><br><span class="line">arr.indexOf(&#x27;30&#x27;); // 元素&#x27;30&#x27;的索引为2</span><br></pre></td></tr></table></figure><p>注意了，数字<code>30</code>和字符串<code>&#39;30&#39;</code>是不同的元素。</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p><code>slice()</code>就是对应String的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;];</span><br><span class="line">arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line">arr.slice(3); // 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span><br></pre></td></tr></table></figure><p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p><p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;];</span><br><span class="line">var aCopy = arr.slice();</span><br><span class="line">aCopy; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;]</span><br><span class="line">aCopy === arr; // false</span><br></pre></td></tr></table></figure><h3 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h3><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2];</span><br><span class="line">arr.push(&#x27;A&#x27;, &#x27;B&#x27;); // 返回Array新的长度: 4</span><br><span class="line">arr; // [1, 2, &#x27;A&#x27;, &#x27;B&#x27;]</span><br><span class="line">arr.pop(); // pop()返回&#x27;B&#x27;</span><br><span class="line">arr; // [1, 2, &#x27;A&#x27;]</span><br><span class="line">arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次</span><br><span class="line">arr; // []</span><br><span class="line">arr.pop(); // 空数组继续pop不会报错，而是返回undefined</span><br><span class="line">arr; // []</span><br></pre></td></tr></table></figure><h3 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h3><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2];</span><br><span class="line">arr.unshift(&#x27;A&#x27;, &#x27;B&#x27;); // 返回Array新的长度: 4</span><br><span class="line">arr; // [&#x27;A&#x27;, &#x27;B&#x27;, 1, 2]</span><br><span class="line">arr.shift(); // &#x27;A&#x27;</span><br><span class="line">arr; // [&#x27;B&#x27;, 1, 2]</span><br><span class="line">arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次</span><br><span class="line">arr; // []</span><br><span class="line">arr.shift(); // 空数组继续shift不会报错，而是返回undefined</span><br><span class="line">arr; // []</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;B&#x27;, &#x27;C&#x27;, &#x27;A&#x27;];</span><br><span class="line">arr.sort();</span><br><span class="line">arr; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></pre></td></tr></table></figure><p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>reverse()</code>把整个<code>Array</code>的元素给调个个，也就是反转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;];</span><br><span class="line">arr.reverse(); </span><br><span class="line">arr; // [&#x27;three&#x27;, &#x27;two&#x27;, &#x27;one&#x27;]</span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;, &#x27;Oracle&#x27;];</span><br><span class="line">// 从索引2开始删除3个元素,然后再添加两个元素:</span><br><span class="line">arr.splice(2, 3, &#x27;Google&#x27;, &#x27;Facebook&#x27;); // 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span><br><span class="line">arr; // [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span><br><span class="line">// 只删除,不添加:</span><br><span class="line">arr.splice(2, 2); // [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span><br><span class="line">arr; // [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]</span><br><span class="line">// 只添加,不删除:</span><br><span class="line">arr.splice(2, 0, &#x27;Google&#x27;, &#x27;Facebook&#x27;); // 返回[],因为没有删除任何元素</span><br><span class="line">arr; // [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">var added = arr.concat([1, 2, 3]);</span><br><span class="line">added; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span><br><span class="line">arr; // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br></pre></td></tr></table></figure><p><em>请注意</em>，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p><p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">arr.concat(1, 2, [3, 4]); // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3];</span><br><span class="line">arr.join(&#x27;-&#x27;); // &#x27;A-B-C-1-2-3&#x27;</span><br></pre></td></tr></table></figure><p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [[1, 2, 3], [400, 500, 600], &#x27;-&#x27;];</span><br></pre></td></tr></table></figure><p>上述<code>Array</code>包含3个元素，其中头两个元素本身也是<code>Array</code>。</p><h1 id="JavaScript条件语句"><a href="#JavaScript条件语句" class="headerlink" title="JavaScript条件语句"></a>JavaScript条件语句</h1><p>条件语句用于基于不同的条件来执行不同的动作。</p><hr><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p><p>在 JavaScript 中，我们可使用以下条件语句：</p><ul><li><p><strong>if 语句</strong> - (单分支语句）只有当指定条件为 true 时，使用该语句来执行代码</p><p>​            为false则不执行花括号里的语句跳出</p></li><li><p><strong>if…else 语句</strong> - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</p></li><li><p><strong>if…else if….else 语句</strong>- 使用该语句来选择多个代码块之一来执行</p></li><li><p><strong>switch 语句</strong> - 使用该语句来选择多个代码块之一来执行</p></li></ul><h3 id="通过分支流程控制if语句"><a href="#通过分支流程控制if语句" class="headerlink" title="通过分支流程控制if语句"></a>通过分支流程控制if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var age =prompt(&#x27;请输入您的年龄&#x27;)</span><br><span class="line">if (age &gt;= 18)&#123;</span><br><span class="line">alert(&#x27;我想带你去网吧偷耳机&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过双分支语句控制流程（if-else"><a href="#通过双分支语句控制流程（if-else" class="headerlink" title="通过双分支语句控制流程（if else)"></a>通过双分支语句控制流程（if else)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//条件成立 执行if 里面的代码，否则执行else 里面的代码</span><br><span class="line">if ()&#123;</span><br><span class="line">//如果条件成立 执行代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//否则 执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断闰年案例"><a href="#判断闰年案例" class="headerlink" title="判断闰年案例"></a>判断闰年案例</h2><p>案例分析：判断任意年份是否为闰年，需要满足以下条件中的任意一个：<br>① 该年份能被 4 整除同时不能被 100 整除；<br>② 该年份能被400整除。</p><p>弹出prompt 输入框让用户输入年丰，取过来值保存在变量中</p><p>使用if语句判断，是输入闰年语句否则执行else里面输出的语句</p><p>注意逻辑运算符&amp;&amp;与||的用法，通过取模判断余数为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var year = prompt (&#x27;请输入年份:&#x27;)</span><br><span class="line">if(year % 4 == 0 &amp;&amp; year % 100 !=0 || year % 400 ==0 )</span><br><span class="line">&#123;</span><br><span class="line">alert (&#x27;该年是闰年&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">alert(&#x27;该年是平年&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多分支语句（if-else-if"><a href="#多分支语句（if-else-if" class="headerlink" title="多分支语句（if else if)"></a>多分支语句（if else if)</h3><p>语法规范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(条件表达式1)&#123;</span><br><span class="line">//语句1;</span><br><span class="line">&#125;</span><br><span class="line">else if(条件表达式2)&#123;</span><br><span class="line">//语句2;</span><br><span class="line">&#125;</span><br><span class="line">else (条件表达式3)&#123;</span><br><span class="line">//语句3;</span><br><span class="line">&#125;san&#x27;yun</span><br></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>能做一些简单的条件选择。有三元运算符组成的式子称为三元表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++num 3+5 ? ;</span><br></pre></td></tr></table></figure><p>语法结构</p><p>条件表达式？ 表达式1 :  表达式2</p><p>执行思路：如果条件表达式为true 则返回表达式1 的值</p><p>否则，为false 返回表达式2的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num = 10</span><br><span class="line">var result = num &gt;5 ? &#x27;是的&#x27; : &#x27;不是的&#x27;;</span><br></pre></td></tr></table></figure><p>案例：利用三元表达式输出最大数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var num1 = prompt(&#x27;&#x27;)</span><br><span class="line">    var num2 = prompt(&#x27;&#x27;)</span><br><span class="line">    var num3 = prompt(&#x27;&#x27;)</span><br><span class="line">    var end = (num1 &gt; num2 ? (num1 &gt; num3 ? num1 : num3) : (num2 &gt; num3 ? num2 : num3))</span><br><span class="line">        alert(end + &#x27;最大&#x27;);</span><br></pre></td></tr></table></figure><p>案例：数字补0</p><p>输入数字，若小于10，则前面补0,如果大于10，则不用.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var time = prompt(&#x27;请输入0-59任意一个数字：&#x27;)</span><br><span class="line">var result = time &lt; 10 ? &#x27;0&#x27;+time : time;</span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 扩展 padStart(长度.填的数值)</span><br><span class="line">// padEnd(长度,填的数值)</span><br><span class="line">var result = num.toString().padStart(2, &#x27;0&#x27;)</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><h3 id="Switch执行多分支语句"><a href="#Switch执行多分支语句" class="headerlink" title="Switch执行多分支语句"></a>Switch执行多分支语句</h3><p>lion给表达式的值与case 的选项值相匹配，若都没有匹配上则执行default的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch (条件表达式) &#123;</span><br><span class="line">case value1：</span><br><span class="line">业务逻辑1;</span><br><span class="line">break;</span><br><span class="line">case value2：</span><br><span class="line">业务逻辑2;</span><br><span class="line">break;</span><br><span class="line">case value3：</span><br><span class="line">业务逻辑3;</span><br><span class="line">break;</span><br><span class="line">dafault:</span><br><span class="line">//执行最后的语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var num =3 ;</span><br><span class="line">switch (num) &#123;</span><br><span class="line">case 1:</span><br><span class="line">console.log(1);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">alert(&#x27;没有次水果&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">// 表达式经常用作变量</span><br><span class="line">//num值和case的值匹配属于全等=== 才可以</span><br><span class="line">//case 里面如果没有break 则不会推出switch 继续执行下一个case</span><br></pre></td></tr></table></figure><p>Switch 和If else if 语句的区别</p><ul><li>一般情况下，他们两个语句可以相互替换</li><li>switch… case 语句 通常处理case <strong>比较确定值(全等)<strong>的情况,二if…else更灵活，</strong>常用于范围判定</strong>(大于，等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句效果更高。而else 语句有几种条件,就得判断多少次</li><li>当分支比较少时，if…else 语句执行效率比switch语句高</li><li>当分支比较多时，switch语句的执行的效率比较高，而且结构更加清晰</li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环的目的：解决重复操作提高效率.</p><p>被重复的语句称之为循环体</p><p>循环体和终止条件组成的语句称之为循环语句</p><h1 id="JavaScript中的循环"><a href="#JavaScript中的循环" class="headerlink" title="JavaScript中的循环"></a>JavaScript中的循环</h1><ul><li>for 循环</li><li>while循环</li><li>do..while循环</li><li>for…in循环</li></ul><h2 id="for-循环语法结构"><a href="#for-循环语法结构" class="headerlink" title="for 循环语法结构"></a>for 循环语法结构</h2><p>重复执行某些代码，通常和技术有关系   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (初始化表达式;条件表达式;操作表达式)&#123;</span><br><span class="line">//循环体</span><br><span class="line">&#125;</span><br><span class="line">//初始化变量即 Var 声明的一个普通变量，通常用作计数器使用，在for里只执行一次 index</span><br><span class="line">//条件表达式 用来决定每一个循环是否继续执行,即终止条件</span><br><span class="line">//操作表达式 每次循环最后执行的代码 经常用于计数器变量的更新递增或者递减</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 1; 1&lt;=100;i++)&#123;</span><br><span class="line">console.log(&#x27;速爪巴&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过for-循环计算1-100的偶数和奇数的和"><a href="#通过for-循环计算1-100的偶数和奇数的和" class="headerlink" title="通过for 循环计算1-100的偶数和奇数的和"></a>通过for 循环计算1-100的偶数和奇数的和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var even = 0</span><br><span class="line">var odd = 0</span><br><span class="line">for (var i = 1; i &lt;= 100;i++)&#123;</span><br><span class="line">if(i % 2 == 0)&#123;</span><br><span class="line">even =even + i</span><br><span class="line">&#125;else &#123;</span><br><span class="line">odd = odd +i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(&quot;1~100之间偶数和为:&quot;+even+&#x27;n&#x27;+&quot;1-100所有奇数和为:&quot;+odd)</span><br></pre></td></tr></table></figure><h3 id="通过1-100直接所有能被3整除的数字和"><a href="#通过1-100直接所有能被3整除的数字和" class="headerlink" title="通过1-100直接所有能被3整除的数字和"></a>通过1-100直接所有能被3整除的数字和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var result = 0 </span><br><span class="line">for (var i = 1; i&lt;= 100; i++)&#123;</span><br><span class="line">if ( i % 3 == 0)&#123;</span><br><span class="line">result = result +i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">alert (&quot;1-100直接所有能被3整除的数字和是&quot;+result);</span><br></pre></td></tr></table></figure><h3 id="通过for循环计算若干人数-amp-若干成绩-求解班级总分和平均成绩"><a href="#通过for循环计算若干人数-amp-若干成绩-求解班级总分和平均成绩" class="headerlink" title="通过for循环计算若干人数&amp;若干成绩.求解班级总分和平均成绩"></a>通过for循环计算若干人数&amp;若干成绩.求解班级总分和平均成绩</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> var num = prompt (&#x27;请输入班级总人数&#x27;)</span><br><span class="line"> var sum = 0</span><br><span class="line"> var ave = 0</span><br><span class="line"> for var (i=1; i &lt;= num;i++;)&#123;</span><br><span class="line"> var score = promt(&#x27;请输入第&#x27; + i + &#x27;个学生的成绩&#x27;)</span><br><span class="line"> sum = sum + parseFloat(score)</span><br><span class="line">&#125;</span><br><span class="line">ave =sum / num</span><br><span class="line">alert(&#x27;班级总成绩&#x27;+sum + &#x27;\n&#x27;+&#x27;班级平均分&#x27;+ave);</span><br></pre></td></tr></table></figure><h3 id="for循环打印string"><a href="#for循环打印string" class="headerlink" title="for循环打印string"></a>for循环打印string</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str =&#x27;&#x27;;</span><br><span class="line">for (var i = 1; i &lt;= 5;i++)&#123;</span><br><span class="line">str = str +&#x27;string&#x27;</span><br><span class="line">&#125;</span><br><span class="line">alert(str)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var num = prompt (&#x27;想要出现多少个星星？&#x27;)</span><br><span class="line">var str = &#x27;&#x27;;</span><br><span class="line">//此处定义一个空的字符串赋空值是为了给字符串初始化，这个变量是用来准备存放对象的，也方便调错。</span><br><span class="line">for (var i = 1; 1 &lt;= num; 1++)&#123;</span><br><span class="line">str = str + &quot;string&quot;</span><br><span class="line">&#125;</span><br><span class="line">alert(str)</span><br></pre></td></tr></table></figure><h3 id="双重for循环运用"><a href="#双重for循环运用" class="headerlink" title="双重for循环运用"></a>双重for循环运用</h3><p>嵌套关系，可以将内层的循环看作外层循环的语句</p><p><strong>外层的循环循环一次，里面的循环执行全部</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for (var i = 1 ; i &lt;= 3; i++)&#123;</span><br><span class="line">console.log(&#x27;这是外层循环第&#x27;+i+&#x27;次&#x27;)</span><br><span class="line">for (var j =1; j &lt;= 3; j++)&#123;</span><br><span class="line">cosole.log(&#x27;这是内层循环的第&#x27;+j+&#x27;次&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逐行打印string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;&#x27;</span><br><span class="line">for (var i =1 ; 1 &lt;= 5; i++)&#123;</span><br><span class="line">for (var j=1 ; 1 &lt;= 5; j++)&#123;</span><br><span class="line">str = str +&#x27;string&#x27;</span><br><span class="line">//执行完成一行就要行换</span><br><span class="line">&#125;</span><br><span class="line">//然后执行外层循环因此需在外层加换行符</span><br><span class="line">str = str +&#x27;\n&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印N*N行string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var row = prompt (&#x27;请您输入行数&#x27;)</span><br><span class="line">var cow = prompt (&#x27;请您输入列数&#x27;)</span><br><span class="line">var str = &#x27;&#x27;;</span><br><span class="line">for (var i = 1; i &lt;=row; i++)&#123;</span><br><span class="line">for(var j = 1; j &lt;= cow; j++)&#123;</span><br><span class="line">str = str +&quot;string&quot;</span><br><span class="line">&#125;</span><br><span class="line">str += &#x27;\n&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(str);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印到string (倒三角案例)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;&#x27;;</span><br><span class="line">for(var i = 1; i &lt;= 10; i++)&#123;</span><br><span class="line">for(var j = i ; j &lt;= 10; j++ )&#123;</span><br><span class="line">str = str +&#x27;string&#x27;</span><br><span class="line">&#125;</span><br><span class="line">str += &#x27;\n&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p>正三角</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;&#x27;</span><br><span class="line">for (var i = 1; i &lt;= 10; i++) &#123;</span><br><span class="line">    for (var j = 1; j &lt;= i; j++) &#123;</span><br><span class="line">str = str + &#x27;♆&#x27;</span><br><span class="line">&#125;</span><br><span class="line">str += &#x27;\n&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure><p>乘法表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;&#x27;</span><br><span class="line">       for (var i = 1; i &lt;= 9; i++) &#123;</span><br><span class="line">           for (var j = 1; j &lt;= i; j++) &#123;</span><br><span class="line">               str += j + &#x27;×&#x27; + i + &#x27;=&#x27; + i * j + &#x27;\t&#x27;</span><br><span class="line">           &#125;</span><br><span class="line">           str += &#x27;\n&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">       console.log(str);</span><br></pre></td></tr></table></figure><p>打印人的一生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i = 1</span><br><span class="line">       while (i &lt;= 100) &#123;</span><br><span class="line">           console.log(`这个人今年$&#123;i&#125;岁了`)</span><br><span class="line">           i++</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var i = 0</span><br><span class="line">        do &#123;</span><br><span class="line">            i++</span><br><span class="line">            console.log(`你今年$&#123;i&#125;岁了`);</span><br><span class="line">        &#125;</span><br><span class="line">        while (i &lt;= 30) &#123;</span><br><span class="line">            console.log(`你猝死了`)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印我爱你</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mes = prompt(&#x27;你爱我吗？&#x27;)</span><br><span class="line">       while (mes !== &#x27;我爱你&#x27;) &#123;</span><br><span class="line">           mes = prompt(&#x27;你爱我吗!&#x27;)</span><br><span class="line">       &#125;</span><br><span class="line">       alert(&#x27;滚!&#x27;);</span><br></pre></td></tr></table></figure><p>打印100以内奇数偶数和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var even = 0</span><br><span class="line">var odd = 0</span><br><span class="line">var i = 1</span><br><span class="line">do &#123;</span><br><span class="line">    if (i % 2 === 0) &#123;</span><br><span class="line">        even += i</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        odd += i</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line">while (i &lt;= 100)</span><br><span class="line">console.log(even);</span><br><span class="line">console.log(odd);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(条件表达式)&#123;</span><br><span class="line">//循环体</span><br><span class="line">&#125;</span><br><span class="line">//当表达式结果为true时一直执行循环体 因此常配合操作表达式使用</span><br><span class="line">//否则退出循环</span><br><span class="line">//也应有计数器初始化变量</span><br><span class="line">//操作表达式完成计时器更新防止死循环</span><br></pre></td></tr></table></figure><p>计算1~100之间所有整数的和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0</span><br><span class="line">var j = 1</span><br><span class="line">while ( j &lt;= 100) &#123;</span><br><span class="line">sum += j;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">console.log(sum)</span><br></pre></td></tr></table></figure><p>复合赋值运算符</p><h1 id="JavaScript-Array（数组）-对象"><a href="#JavaScript-Array（数组）-对象" class="headerlink" title="JavaScript Array（数组） 对象"></a>JavaScript Array（数组） 对象</h1><p>数组对象的作用是：使用单独的变量名来存储一系列的值，他是一个有序的集合。</p><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><p>创建一个数组，有三种方法。</p><p>下面的代码定义了一个名为 myCars的数组对象：</p><p>1: 常规方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var myCars=new Array();</span><br><span class="line">myCars[0]=&quot;Saab&quot;;      </span><br><span class="line">myCars[1]=&quot;Volvo&quot;;</span><br><span class="line">myCars[2]=&quot;BMW&quot;;</span><br><span class="line">console.log(myCars)</span><br></pre></td></tr></table></figure><p>2: 简洁方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myCars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br><span class="line">console.log(myCars)</span><br></pre></td></tr></table></figure><p>3: 字面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myCars=[&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;];</span><br><span class="line">console.log(myCars)</span><br></pre></td></tr></table></figure><hr><p>案例：取数值最大值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2, 99, 4, 6, 65, 22]</span><br><span class="line">var max = arr[0]</span><br><span class="line"> for (var i = 1; i &lt; arr.length; i++)</span><br><span class="line">if (arr[i] &gt; max) &#123;</span><br><span class="line">max = arr[i]</span><br><span class="line"> &#125;</span><br><span class="line">console.log(&#x27;最大数为:&#x27; + max);// 输出99</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//求数值最小值</span><br><span class="line">        var arr = [322, 232, 2313, -323, 232, 324, -43434]</span><br><span class="line">        var min = arr[0]</span><br><span class="line">        for (var i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            if (arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        console.log(min)</span><br></pre></td></tr></table></figure><h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><p>通过指定数组名以及索引号码，你可以访问某个特定的元素。</p><p>以下实例可以访问myCars数组的第一个值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name=myCars[0];</span><br></pre></td></tr></table></figure><p>以下实例修改了数组 myCars 的第一个元素:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myCars[0]=&quot;Opel&quot;;</span><br></pre></td></tr></table></figure><p>利用for循环索引数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var n = &#x27;4&#x27;</span><br><span class="line">var arr = [&#x27;apple&#x27;, &#x27;sow&#x27;, &#x27;cow&#x27;, &#x27;string&#x27;, &#x27;gold&#x27;]</span><br><span class="line">for (var i = 0; i &lt; n; i++) &#123;</span><br><span class="line">console.log(arr[i])</span><br><span class="line">&#125;//输出 前4个元素</span><br></pre></td></tr></table></figure><p>利用Math.max.apply输出最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var data = [3, 44, 555, 777]</span><br><span class="line">console.log(Math.max.apply(Math, data));// 777</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记（第一天）</title>
      <link href="/Parade001.github.io/2021/10/10/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E5%A4%A9)/"/>
      <url>/Parade001.github.io/2021/10/10/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E5%A4%A9)/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript是Web-的编程语言"><a href="#JavaScript是Web-的编程语言" class="headerlink" title="JavaScript是Web 的编程语言"></a>JavaScript是Web 的编程语言</h2><p>所有现代的 HTML 页面都使用 JavaScript。</p><p>JavaScript 非常容易学。</p><p>在了解JavaScript 前我想各位都是对HTML及CSS有过一定了解的;</p><h2 id="JavaScript组成"><a href="#JavaScript组成" class="headerlink" title="JavaScript组成"></a>JavaScript组成</h2><ul><li>ECMAScript（规定了JS的基本语法）</li><li>DOM文档对象模型 （主要提供一些操作HTML的文档的工具）</li><li>BOM浏览器对象模型（主要提供一些操作浏览器的工具</li></ul><h2 id="JavaScript代码的执行"><a href="#JavaScript代码的执行" class="headerlink" title="JavaScript代码的执行"></a>JavaScript代码的执行</h2><p>浏览器本身不会瑞执行js代码，js代码是通过js引擎执行代码，js引擎执行代码的时候会逐条解析有计算机进行处理。js语言被称为运行在客户端的弱类型语言。</p><h1 id="JavaScript是脚本语言"><a href="#JavaScript是脚本语言" class="headerlink" title="JavaScript是脚本语言"></a>JavaScript是脚本语言</h1><p>特点</p><ul><li><p>是一种轻量级的基于对象（object-based）的高级编程语言</p></li><li><p>是可插入的HTML页面的编程代码</p></li><li><p>可有所有的现代浏览器只写</p></li><li><p>容易学习</p><h2 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h2></li><li><p>行内式</p></li><li><p>内嵌式<script></script></p></li><li><p>外联式<script src=""></script></p></li></ul><h1 id="JS变量-important"><a href="#JS变量-important" class="headerlink" title="JS变量 !important"></a>JS变量 !important</h1><p>本质：变量是程序在内存中申请的一块存放数据的空间；（存放数据的容器，可以通过变量获取数据，也可以修改数据）</p><h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><ol><li>由字母（a-zA-Z）、数字（0-9）、下划线（_）、美元符号($)组成</li><li>严格区大小写。var app与var App;这是两个变量</li><li>不能以为数字开头。18age是错误的</li><li>不能是关键词是关键字、保留字。例如：var、for、while</li></ol><p>建议</p><p>   5.变量名必须有意义</p><p>   6.遵守驼峰命名法，首字母小写，后面单词的首字母需要大写，myFirstName这样</p><h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><h2 id="数据类型的概念"><a href="#数据类型的概念" class="headerlink" title="数据类型的概念"></a>数据类型的概念</h2><p>在编程过程中，数据类型是重要的概念。</p><p>为了能够操作变量，了解数据类型是很重要的。</p><p>如果没有数据类型，计算机就无法安全地解决这道题：</p><p>给 “Volvo” 加上 911 有意义吗？这么做会发生错误还是会产生一个结果？</p><p>JavaScript 会这样处理上面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = &quot;911&quot; + &quot;Porsche&quot;;</span><br></pre></td></tr></table></figure><p>当数值和字符串相加时，JavaScript 将把数值视作字符串。</p><p>JavaScript 变量能够保存多种<em>数据类型</em>：数值、字符串值、数组、对象等等：</p><p>值类型(基本类型)*</p><ul><li>字符串（String）</li><li>数字(Number)</li><li>布尔(Boolean)</li><li>对空（Null）</li><li>未定义（Undefined）</li><li>Symbol</li></ul><p><em>引用数据类型</em></p><ul><li>对象(Object)</li><li>数组(Array)</li><li>函数(Function)</li></ul><h2 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h2><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型，同时声明多个变量也可以只用写一个Var，用英文逗号隔开，变量值将以最后一次赋的值为准：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x;               // x 为 undefined</span><br><span class="line">var x = 5;           // 现在 x 为数字</span><br><span class="line">var x = &quot;John&quot;;      // 现在 x 为字符串</span><br></pre></td></tr></table></figure><h2 id="JS的严格模式"><a href="#JS的严格模式" class="headerlink" title="JS的严格模式"></a>JS的严格模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用严格模式 加了&#x27;use strict&#x27; 使用ES6YIS以上的js 如果没有ES5</span><br><span class="line">’use strict&#x27;</span><br><span class="line">username = &#x27;张三&#x27;</span><br><span class="line">cosole.log(userame)//报错 username is not defined</span><br><span class="line">//定义变量时一定记得加Var</span><br></pre></td></tr></table></figure><h2 id="JavaScript：直接写入-HTML-输出流"><a href="#JavaScript：直接写入-HTML-输出流" class="headerlink" title="JavaScript：直接写入 HTML 输出流"></a>JavaScript：直接写入 HTML 输出流</h2><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;);</span><br><span class="line">document.write(&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。 </span><br></pre></td></tr></table></figure><hr><h2 id="JavaScript：验证输入"><a href="#JavaScript：验证输入" class="headerlink" title="JavaScript：验证输入"></a>JavaScript：验证输入</h2><p>JavaScript 常用于验证用户的输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isNaN(x) &#123;alert(<span class="string">&quot;不是数字&quot;</span>)&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">定义和用法</span><br><span class="line">isNaN() 函数可确定值是否为非数字（Not-a-Number）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果该值等于 NaN，则此函数返回 true。否则返回 false。</span><br><span class="line"></span><br><span class="line">此函数不同于 Number 特定的 Number.isNaN() 方法。</span><br><span class="line"></span><br><span class="line">全局 isNaN() 函数将测试值转换为数字，然后对其进行测试。</span><br><span class="line"></span><br><span class="line">Number.isNaN() 不会将值转换为数字，并且不会为任何非数字类型的值返回 true。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">isNaN(123) //false</span><br><span class="line">isNaN(-1.23) //false</span><br><span class="line">isNaN(5-2) //false</span><br><span class="line">isNaN(0) //false</span><br><span class="line">isNaN(&#x27;123&#x27;) //false</span><br><span class="line">isNaN(&#x27;Hello&#x27;) //true</span><br><span class="line">isNaN(&#x27;2005/12/12&#x27;) //true</span><br><span class="line">isNaN(&#x27;&#x27;) //false</span><br><span class="line">isNaN(true) //false</span><br><span class="line">isNaN(undefined) //true</span><br><span class="line">isNaN(&#x27;NaN&#x27;) //true</span><br><span class="line">isNaN(NaN) //true</span><br><span class="line">isNaN(0 / 0) //true</span><br><span class="line">isNaN(null) //false</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h2><p>在 JavaScript 中，没有值的变量，其值是 undefined。typeof 也返回 undefined。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person;                  // 值是 undefined，类型是 undefined</span><br></pre></td></tr></table></figure><p>任何变量均可通过设置值为 undefined 进行清空。其类型也将是 undefined。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person = undefined;          // 值是 undefined，类型是 undefined</span><br></pre></td></tr></table></figure><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>在 JavaScript 中，null 是 “nothing”。它被看做不存在的事物。</p><p>不幸的是，在 JavaScript 中，null 的数据类型是对象。</p><p>您可以把 null 在 JavaScript 中是对象理解为一个 bug。它本应是 null。</p><p>您可以通过设置值为 null 清空对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person = null;           // 值是 null，但是类型仍然是对象</span><br></pre></td></tr></table></figure><p>您也可以通过设置值为 undefined 清空对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person = undefined;     // 值是 undefined，类型是 undefined</span><br></pre></td></tr></table></figure><h2 id="Undefined-与-Null-的区别"><a href="#Undefined-与-Null-的区别" class="headerlink" title="Undefined 与 Null 的区别"></a>Undefined 与 Null 的区别</h2><p>Undefined 与 null 的值相等，但类型不相等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined              // undefined</span><br><span class="line">typeof null                   // object</span><br><span class="line">null === undefined            // false</span><br><span class="line">null == undefined             // true</span><br></pre></td></tr></table></figure><p><strong>1、定义</strong></p><ul><li> （1）undefined：是所有没有赋值变量的默认值，自动赋值。</li><li> （2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</li></ul><p><strong>2、何时使用null?</strong></p><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。</p><p><strong>3、null 与 undefined 的异同点是什么呢？</strong></p><p><strong>共同点</strong>：都是原始类型，保存在栈中变量本地。</p><p>不同点：</p><p>（1）undefined——表示变量声明过但并未赋过值。</p><p>它是所有未赋值变量默认值，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a;    // a 自动被赋值为 undefined</span><br></pre></td></tr></table></figure><p>（2）null——表示一个变量将来可能指向一个对象。</p><p>一般用于主动释放指向对象的引用，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var emps = [&#x27;ss&#x27;,&#x27;nn&#x27;];</span><br><span class="line">emps = null;     // 释放指向数组的引用</span><br></pre></td></tr></table></figure><p>4、延伸——垃圾回收站</p><p>它是专门释放对象内存的一个程序。</p><ul><li> （1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收期；</li><li> （2）总有一个对象不再被任何变量引用时，才释放。</li></ul><h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><p>原始数据值是一种没有额外属性和方法的单一简单数据值。</p><h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><p>您可使用 JavaScript 的 typeof 来<strong>确定 JavaScript 变量的数据类型</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typeof 运算符返回变量或表达式的类型：</span><br><span class="line">- string</span><br><span class="line">- number</span><br><span class="line">- boolean</span><br><span class="line">- undefined</span><br><span class="line">- Null</span><br><span class="line"></span><br><span class="line">typeof 运算符可返回以下原始类型之一：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typeof &quot;Bill&quot;              // 返回 &quot;string&quot;</span><br><span class="line">typeof 3.14                // 返回 &quot;number&quot;</span><br><span class="line">typeof true                // 返回 &quot;boolean&quot;</span><br><span class="line">typeof false               // 返回 &quot;boolean&quot;</span><br><span class="line">typeof x                   // 返回 &quot;undefined&quot; (假如 x 没有值)</span><br><span class="line">typeof &quot;&quot;                  // 返回 &quot;string&quot;</span><br><span class="line">typeof &quot;Bill&quot;              // 返回 &quot;string&quot;</span><br><span class="line">typeof &quot;Bill Gates&quot;          // 返回 &quot;string&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复杂数据"><a href="#复杂数据" class="headerlink" title="复杂数据"></a>复杂数据</h2><p>typeof 运算符可返回以下两种类型之一：</p><ul><li>function</li><li>object</li></ul><p>typeof 运算符把对象、数组或 null 返回 object。</p><p>typeof 运算符不会把函数返回 object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typeof &#123;name:&#x27;Bill&#x27;, age:62&#125; // 返回 &quot;object&quot;</span><br><span class="line">typeof [1,2,3,4]             // 返回 &quot;object&quot; (并非 &quot;array&quot;，参见下面的注释)</span><br><span class="line">typeof null                  // 返回 &quot;object&quot;</span><br><span class="line">typeof function myFunc()&#123;&#125;   // 返回 &quot;function&quot;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><p>JavaScript 没有任何打印或者输出的函数。</p><h2 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li><p>使用 <strong>window.alert()</strong> 弹出警告框。</p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><h2 id="使用window-alert（）"><a href="#使用window-alert（）" class="headerlink" title="使用window.alert（）"></a>使用window.alert（）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作-HTML-元素"><a href="#操作-HTML-元素" class="headerlink" title="操作 HTML 元素"></a>操作 HTML 元素</h2><p>当需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p><p>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;我的第一个段落&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = &quot;段落已修改。&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>document.getElementById(“demo”)</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。</p><p><strong>innerHTML = “段落已修改。”</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p><h2 id="写到-HTML-文档"><a href="#写到-HTML-文档" class="headerlink" title="写到 HTML 文档"></a>写到 HTML 文档</h2><p>出于测试目的，您可以将JavaScript直接写在HTML 文档中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>请使用 document.write() 仅仅向文档输出写内容。</p><p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    document.write(Date());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="写到控制台"><a href="#写到控制台" class="headerlink" title="写到控制台"></a>写到控制台</h2><p>你可以使用 <strong>console.log()</strong> 方法在浏览器中显示 JavaScript 值。</p><p>在浏览器中使用 F12 来启用调试模式，调试窗口中点击 “Console” 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">a = 5;</span><br><span class="line">b = 6;</span><br><span class="line">c = a + b;</span><br><span class="line">console.log(c);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h1><p>JavaScript 字符串用于存储和处理文本。</p><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>可以使用内置属性 <strong>length</strong> 来计算字符串的长度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var txt = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">var sln = txt.length;</span><br></pre></td></tr></table></figure><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><table><thead><tr><th align="center">代码</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">tab(制表符)</td></tr><tr><td align="center">\b</td><td align="center">退格符</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr></tbody></table><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p>更多方法实例可以参见：<a href="https://www.runoob.com/jsref/jsref-obj-string.html">JavaScript String 对象</a>。</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">charAt()</td><td align="center">返回指定索引位置的字符</td></tr><tr><td align="center">charCodeAt()</td><td align="center">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="center">concat()</td><td align="center">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="center">fromCharCode()</td><td align="center">将 Unicode 转换为字符串</td></tr><tr><td align="center">indexOf()</td><td align="center">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="center">localeCompare()</td><td align="center">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="center">match()</td><td align="center">找到一个或多个正则表达式的匹配</td></tr><tr><td align="center">replace()</td><td align="center">替换与正则表达式匹配的子串</td></tr><tr><td align="center">search()</td><td align="center">检索与正则表达式相匹配的值</td></tr><tr><td align="center">slice()</td><td align="center">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="center">split()</td><td align="center">把字符串分割为子字符串数组</td></tr><tr><td align="center">substr()</td><td align="center">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="center">substring()</td><td align="center">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="center">toLocaleLowerCase()</td><td align="center">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLocaleUpperCase()</td><td align="center">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLowerCase()</td><td align="center">把字符串转换为小写</td></tr><tr><td align="center">toString()</td><td align="center">返回字符串对象值</td></tr><tr><td align="center">toUpperCase()</td><td align="center">把字符串转换为大写</td></tr><tr><td align="center">trim()</td><td align="center">移除字符串首尾空白</td></tr><tr><td align="center">valueOf()</td><td align="center">返回某个字符串对象的原始值</td></tr></tbody></table><h1 id="数值交换"><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var temp</span><br><span class="line">        var apple1= &#x27;红苹果&#x27;</span><br><span class="line">        var apple2= &#x27;青苹果&#x27;</span><br><span class="line">        temp = apple1</span><br><span class="line">        apple1 = apple2</span><br><span class="line">        apple2 = temp</span><br><span class="line">        console.log(apple1, &#x27;\n&#x27;, apple2)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><p><strong>语法规则定义了语言结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNaN(value)</span><br></pre></td></tr></table></figure><p>value:必须。要测试的值</p><h2 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h2><p>一般固定值称为字面量，如 3.14。</p><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)：   </p><ul><li>3.14 </li><li>1001</li><li> 123e5 </li></ul><p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号：</p><ul><li>  “John Doe”</li><li>   ‘John Doe’</li></ul><p><strong>表达式字面量</strong> 用于计算：</p><ul><li>  5 + 6</li><li>  5 * 10  </li></ul><p><strong>数组（Array）字面量</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[40, 100, 1, 5, 25, 10]</span><br></pre></td></tr></table></figure><p><strong>对象（Object）字面量</strong> 定义一个对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>函数（Function）字面量</strong> 定义一个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123; return a * b;&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NaN 的数据类型是 number</span><br><span class="line">数组的数据类型是 object</span><br><span class="line">日期的数据类型是 object</span><br><span class="line">null 的数据类型是 object</span><br><span class="line">未定义变量的数据类型是 undefined</span><br></pre></td></tr></table></figure><h1 id="JavaScript-运算符参考手册"><a href="#JavaScript-运算符参考手册" class="headerlink" title="JavaScript 运算符参考手册"></a>JavaScript 运算符参考手册</h1><h2 id="下表解释了算术运算符："><a href="#下表解释了算术运算符：" class="headerlink" title="下表解释了算术运算符："></a>下表解释了算术运算符：</h2><p>算术运算符用于在变量和/或值之间执行算术。</p><table><thead><tr><th align="center"><em>加</em></th><th align="center"><em>+</em></th><th align="center"><em>x = y + 2</em></th><th align="center"><em>y = 5</em></th><th align="center"><em>x = 7</em></th></tr></thead><tbody><tr><td align="center"><em>减</em></td><td align="center"><em>-</em></td><td align="center"><em>x = y - 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 3</em></td></tr><tr><td align="center"><em>乘</em></td><td align="center">*</td><td align="center"><em>x = y * 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 10</em></td></tr><tr><td align="center"><em>除</em></td><td align="center"><em>/</em></td><td align="center"><em>x = y / 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 2.5</em></td></tr><tr><td align="center"><em>模数（除余）</em></td><td align="center"><em>%</em></td><td align="center"><em>x = y % 2</em></td><td align="center"><em>y = 5</em></td><td align="center"><em>x = 1</em></td></tr><tr><td align="center">累加</td><td align="center"><em>++</em></td><td align="center">x = ++y</td><td align="center">y = 6</td><td align="center">x = 6</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">x = y++</td><td align="center">y = 6</td><td align="center">x = 5</td></tr><tr><td align="center">递减</td><td align="center">–</td><td align="center">x = –y</td><td align="center">y = 4</td><td align="center">x = 4</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">x = y–</td><td align="center">y = 4</td><td align="center">x = 5</td></tr></tbody></table><h2 id="JavaScript-赋值运算符"><a href="#JavaScript-赋值运算符" class="headerlink" title="JavaScript 赋值运算符"></a>JavaScript 赋值运算符</h2><p>赋值运算符用于为 JavaScript 变量赋值。</p><table><thead><tr><th align="center">运算符</th><th align="center">例子</th><th align="center">等同于</th><th align="center">x 中的结果</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x = y</td><td align="center">x = y</td><td align="center">x = 5</td></tr><tr><td align="center">+=</td><td align="center">x += y</td><td align="center">x = x + y</td><td align="center">x = 15</td></tr><tr><td align="center">-=</td><td align="center">x -= y</td><td align="center">x = x - y</td><td align="center">x = 5</td></tr><tr><td align="center">*=</td><td align="center">x *= y</td><td align="center">x = x * y</td><td align="center">x = 50</td></tr><tr><td align="center">/=</td><td align="center">x /= y</td><td align="center">x = x / y</td><td align="center">x = 2</td></tr><tr><td align="center">%=</td><td align="center">x %= y</td><td align="center">x = x % y</td><td align="center">x = 0</td></tr></tbody></table><h2 id="JavaScript-字符串运算符"><a href="#JavaScript-字符串运算符" class="headerlink" title="JavaScript 字符串运算符"></a>JavaScript 字符串运算符</h2><p>赋值运算符用于为 JavaScript 变量赋值。</p><p>给定 <strong>x = 10</strong> 且 <strong>y = 5</strong>，下表解释了赋值运算符：</p><table><thead><tr><th align="center">+</th><th align="center">text3 = text1 + text2</th><th align="center">“Good “</th><th align="center">“Morning”</th><th align="center">“Good Morning”</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">text1 += text2</td><td align="center">“Good Morning”</td><td align="center">“Morning”</td><td align="center">“”</td></tr></tbody></table><h2 id="JavaScript比较运算符"><a href="#JavaScript比较运算符" class="headerlink" title="JavaScript比较运算符"></a>JavaScript比较运算符</h2><p>在逻辑语句中使用比较运算符来确定变量或值之间的相等性或差异。</p><p>给定 <strong>x = 5</strong>，下表解释了比较运算符：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">===</td><td align="center">等值等型</td></tr><tr><td align="center">!=</td><td align="center">不相等</td></tr><tr><td align="center">!==</td><td align="center">不等值或不等型</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于或等于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于或等于</td></tr><tr><td align="center">?</td><td align="center">三元运算符</td></tr></tbody></table><h2 id="JavaScript逻辑运算符"><a href="#JavaScript逻辑运算符" class="headerlink" title="JavaScript逻辑运算符"></a>JavaScript逻辑运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>!</td><td>逻辑非</td></tr></tbody></table><p><strong>！ 一元逻辑运算符 取反符 非a即集合补集</strong></p><p><strong>&amp;&amp; 二元逻辑运算符 符号俩侧一个值为假则假，其余为真</strong></p><p><strong>||二元逻辑运算符同时为真/假则为假</strong> </p><h2 id="逻辑表达式的短路计算"><a href="#逻辑表达式的短路计算" class="headerlink" title="逻辑表达式的短路计算"></a>逻辑表达式的短路计算</h2><table><thead><tr><th align="center">e1</th><th align="center">e2</th><th align="center">e1||e2</th><th align="center">e1&amp;&amp;e2</th></tr></thead><tbody><tr><td align="center">非0</td><td align="center">非0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">非0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">非0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h2 id="JavaScript-类型运算符"><a href="#JavaScript-类型运算符" class="headerlink" title="JavaScript 类型运算符"></a>JavaScript 类型运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">typeof</td><td align="center">返回变量的类型。</td></tr><tr><td align="center">instanceof</td><td align="center">返回 true，如果对象是对象类型的实例。</td></tr></tbody></table><h2 id="JavaScript-位运算符"><a href="#JavaScript-位运算符" class="headerlink" title="JavaScript 位运算符"></a>JavaScript 位运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th><th align="center">等同于</th><th align="center">结果</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">5 &amp; 1</td><td align="center">0101 &amp; 0001</td><td align="center">0001</td><td align="center">1</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">5 | 1</td><td align="center">0101 | 0001</td><td align="center">0101</td><td align="center">5</td></tr><tr><td align="center">~</td><td align="center">非</td><td align="center">~ 5</td><td align="center">~0101</td><td align="center">1010</td><td align="center">10</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">5 ^ 1</td><td align="center">0101 ^ 0001</td><td align="center">0100</td><td align="center">4</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">零填充左位移</td><td align="center">5 &lt;&lt; 1</td><td align="center">0101 &lt;&lt; 1</td><td align="center">1010</td><td align="center">10</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">有符号右位移</td><td align="center">5 &gt;&gt; 1</td><td align="center">0101 &gt;&gt; 1</td><td align="center">0010</td><td align="center">2</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">零填充右位移</td><td align="center">5 &gt;&gt;&gt; 1</td><td align="center">0101 &gt;&gt;&gt; 1</td><td align="center">0010</td><td align="center">2</td></tr></tbody></table><p><em>上例使用 4 位无符号的例子。但是 JavaScript 使用 32 位有符号数。</em></p><p><em>因此，在 JavaScript 中，~ 5 不会返回 10，而是返回 -6。</em></p><p><em>~00000000000000000000000000000101 将返回 11111111111111111111111111111010。</em></p><h1 id="JavaScript-数字"><a href="#JavaScript-数字" class="headerlink" title="JavaScript 数字"></a>JavaScript 数字</h1><p><strong>JavaScript 只有一种数值类型。</strong></p><p><strong>书写数值时带不带小数点均可。</strong></p><h2 id="JavaScript-数值始终是-64-位的浮点数"><a href="#JavaScript-数值始终是-64-位的浮点数" class="headerlink" title="JavaScript 数值始终是 64 位的浮点数"></a>JavaScript 数值始终是 64 位的浮点数</h2><p>与许多其他编程语言不同，JavaScript 不会定义不同类型的数，比如整数、短的、长的、浮点的等等。</p><p>JavaScript 数值始终以双精度浮点数来存储，根据国际 IEEE 754 标准。</p><p>此格式用 64 位存储数值，其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：</p><table><thead><tr><th align="center">值(aka Fraction/Mantissa)</th><th align="center">指数</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center">52 bits(0 - 51)</td><td align="center">11 bits (52 - 62)</td><td align="center">1 bit (63)</td></tr></tbody></table><h2 id="数字和字符串相加"><a href="#数字和字符串相加" class="headerlink" title="数字和字符串相加"></a>数字和字符串相加</h2><h3 id="警告！！"><a href="#警告！！" class="headerlink" title="警告！！"></a>警告！！</h3><p>JavaScript 的加法和级联（concatenation）都使用 + 运算符。</p><p>数字用加法。字符串用级联。</p><p>如果您对两个数相加，结果将是一个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">var y = 20;</span><br><span class="line">var z = x + y;           // z 将是 30（一个数）</span><br></pre></td></tr></table></figure><h2 id="数字字符串"><a href="#数字字符串" class="headerlink" title="数字字符串"></a>数字字符串</h2><p>JavaScript 字符串可以拥有数字内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = 100;         // x 是数字</span><br><span class="line"></span><br><span class="line">var y = &quot;100&quot;;       // y 是字符串</span><br></pre></td></tr></table></figure><h2 id="NaN-非数值（Not-a-Number）"><a href="#NaN-非数值（Not-a-Number）" class="headerlink" title="NaN - 非数值（Not a Number）"></a>NaN - 非数值（Not a Number）</h2><p>NaN 属于 JavaScript 保留词，<strong>指示某个数不是合法数</strong>。</p><p>尝试用一个非数字字符串进行除法会得到 NaN：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = 100 / &quot;Apple&quot;;  // x 将是 NaN（Not a Number）</span><br></pre></td></tr></table></figure><p>您可使用全局 JavaScript 函数 isNaN() 来确定某个值是否是数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = 100 / &quot;Apple&quot;;</span><br><span class="line">isNaN(x);               // 返回 true，因为 x 不是数</span><br></pre></td></tr></table></figure><p>要小心 NaN。假如您在数学运算中使用了 NaN，则结果也将是 NaN：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = NaN;</span><br><span class="line">var y = 5;</span><br><span class="line">var z = x + y;         // z 将是 NaN</span><br></pre></td></tr></table></figure><p>结果也许是串连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = NaN;</span><br><span class="line">var y = &quot;5&quot;;</span><br><span class="line">var z = x + y;         // z 将是 NaN5</span><br></pre></td></tr></table></figure><p>NaN 是数，typeof NaN 返回 number：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof NaN;             // 返回 &quot;number&quot;</span><br></pre></td></tr></table></figure><h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p>JavaScript 会把前缀为 0x 的数值常量解释为十六进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = 0xFF;             // x 将是 255</span><br></pre></td></tr></table></figure><p>绝不要用前导零写数字（比如 07）。</p><p>一些 JavaScript 版本会把带有前导零的数解释为八进制。</p><p>默认地，Javascript 把数显示为十进制小数。</p><p>但是您能够使用 toString() 方法把数输出为十六进制、八进制或二进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myNumber = 128;</span><br><span class="line">myNumber.toString(16);     // 返回 80</span><br><span class="line">myNumber.toString(8);      // 返回 200</span><br><span class="line">myNumber.toString(2);      // 返回 10000000</span><br></pre></td></tr></table></figure><h2 id="数值可以是对象"><a href="#数值可以是对象" class="headerlink" title="数值可以是对象"></a>数值可以是对象</h2><p>通常 JavaScript 数值是通过字面量创建的原始值：var x = 123</p><p>但是也可以通过关键词 new 定义为对象：var y = new Number(123)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = 123;</span><br><span class="line">var y = new Number(123);</span><br><span class="line"></span><br><span class="line">// typeof x 返回 number</span><br><span class="line">// typeof y 返回 object</span><br></pre></td></tr></table></figure><p>请不要创建数值对象。这样会拖慢执行速度。</p><p>new 关键词使代码复杂化，并产生某些无法预料的结果：</p><p>当使用 == 相等运算符时，相等的数看上去相等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = 500;             </span><br><span class="line">var y = new Number(500);</span><br><span class="line"></span><br><span class="line">// (x == y) 为 true，因为 x 和 y 有相等的值</span><br></pre></td></tr></table></figure><p>当使用 === 相等运算符后，相等的数变为不相等，因为 === 运算符需要类型和值同时相等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = 500;             </span><br><span class="line">var y = new Number(500);</span><br><span class="line"></span><br><span class="line">// (x === y) 为 false，因为 x 和 y 的类型不同</span><br></pre></td></tr></table></figure><p>甚至更糟。对象无法进行对比：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = new Number(500);             </span><br><span class="line">var y = new Number(500);</span><br><span class="line"></span><br><span class="line">// (x == y) 为 false，因为对象无法比较</span><br></pre></td></tr></table></figure><h1 id="JavaScript-类型转换"><a href="#JavaScript-类型转换" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h1><ul><li>Number(string) 强制将string转换为数字型</li><li>parselnt(string)转为整数数值型</li><li>parseFloat(string)转为浮点数值型</li><li>js隐式转行（- * /）利用算术隐式转行为数值型</li></ul><p> String() 转换为字符串， Boolean() 转换为布尔值。</p><hr><h2 id="JavaScript-数据类型-1"><a href="#JavaScript-数据类型-1" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>在 JavaScript 中有 6 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li><li>symbol</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><hr><h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>你可以使用 <strong>typeof</strong> 操作符来查看 JavaScript 变量的数据类型。</p><p>typeof “John”                 // 返回 string<br>typeof 3.14                   // 返回 number<br>typeof NaN                    // 返回 number<br>typeof false                  // 返回 boolean<br>typeof [1,2,3,4]              // 返回 object<br>typeof {name:’John’, age:34}  // 返回 object<br>typeof new Date()             // 返回 object<br>typeof function () {}         // 返回 function<br>typeof myCar                  // 返回 undefined (如果 myCar 没有声明)<br>typeof null                   // 返回 object</p><p>尝试一下 »</p><p>请注意：</p><ul><li>NaN 的数据类型是 number</li><li>数组(Array)的数据类型是 object</li><li>日期(Date)的数据类型为 object</li><li>null 的数据类型是 object</li><li>未定义变量的数据类型为 undefined</li></ul><p>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 <strong>typeof</strong> 来判断他们的类型，因为都是 返回 object。</p><hr><h2 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h2><p><strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>“John”.constructor                 // 返回函数 String()  { [native code] }<br>(3.14).constructor                 // 返回函数 Number()  { [native code] }<br>false.constructor                  // 返回函数 Boolean() { [native code] }<br>[1,2,3,4].constructor              // 返回函数 Array()   { [native code] }<br>{name:’John’, age:34}.constructor  // 返回函数 Object()  { [native code] }<br>new Date().constructor             // 返回函数 Date()    { [native code] }<br>function () {}.constructor         // 返回函数 Function(){ [native code] }</p><p>你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 “Array”):</p><p>function isArray(myArray) {<br>    return myArray.constructor.toString().indexOf(“Array”) &gt; -1;<br>}</p><p>你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 “Date”):</p><p>function isDate(myDate) {<br>    return myDate.constructor.toString().indexOf(“Date”) &gt; -1;<br>}</p><hr><h2 id="JavaScript-类型转换-1"><a href="#JavaScript-类型转换-1" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h2><p>JavaScript 变量可以转换为新变量或其他数据类型：</p><ul><li>通过使用 JavaScript 函数</li><li>通过 JavaScript 自身自动转换</li></ul><hr><h1 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h1><p>通过 单引号、双引号、反引号</p><h2 id="转换数据"><a href="#转换数据" class="headerlink" title="转换数据"></a>转换数据</h2><h3 id="转换为字符串类型"><a href="#转换为字符串类型" class="headerlink" title="转换为字符串类型"></a>转换为字符串类型</h3><ol><li>其他数据类型如何转换为字符串类型？<ul><li>变量.toString()</li><li>String()强制转换</li><li>加号拼接字符串</li></ul></li></ol><p>补充：<br>隐式转换：悄咪咪的转换数据，是js解释器悄咪咪的帮我们去完成数据转换的操作，程序员不需要操心<br>显式转换：需要程序员编写代码完成转换</p><p>推荐使用隐式转换来转换数据</p><h3 id="转换为数字类型的parseInt和parseFloat"><a href="#转换为数字类型的parseInt和parseFloat" class="headerlink" title="转换为数字类型的parseInt和parseFloat"></a>转换为数字类型的parseInt和parseFloat</h3><ol><li>parseInt和parseFloat有什么区别？<ul><li>一个是将数据转换为整数</li><li>一个是将数据转换为小数</li></ul></li></ol><h3 id="转换为数字类型的其他方法"><a href="#转换为数字类型的其他方法" class="headerlink" title="转换为数字类型的其他方法"></a>转换为数字类型的其他方法</h3><ol><li>还有其他将数据转换为数字的方法，但是大家觉得哪一种比较适合你？<ul><li>用隐式转换最方便，如：var a = ‘1.23’;  var b = a - 0; var c = +a;</li></ul></li></ol><h3 id="计算年龄案例"><a href="#计算年龄案例" class="headerlink" title="计算年龄案例"></a>计算年龄案例</h3><ol><li>如何使用反引号字符串的形式替代字符串++的写法？<ul><li>alert(<code>您今年已经$&#123;age&#125;岁了</code>)</li></ul></li></ol><p>练习3分钟，完成计算年龄案例</p><h3 id="简单加法器案例"><a href="#简单加法器案例" class="headerlink" title="简单加法器案例"></a>简单加法器案例</h3><ol><li><p>加法器能做出来，如果这个时候，要你把加减乘除的结果都算出来，怎么办？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = +prompt(<span class="string">&#x27;请输入第一个数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2 = +prompt(<span class="string">&#x27;请输入第二个数&#x27;</span>);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> jia = num1 + num2;</span><br><span class="line"><span class="keyword">var</span> jian = num1 - num2;</span><br><span class="line"><span class="keyword">var</span> chen = num1 * num2;</span><br><span class="line"><span class="keyword">var</span> chu = num1 / num2;</span><br><span class="line">   </span><br><span class="line">alert(<span class="string">`加的结果是<span class="subst">$&#123;jia&#125;</span>,减的结果是<span class="subst">$&#123;jian&#125;</span>,乘的结果是<span class="subst">$&#123;chen&#125;</span>,除的结果是<span class="subst">$&#123;chu&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><ol><li><p>如何将一个数据转换为布尔型呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloolean() //true or false</span><br></pre></td></tr></table></figure><ul><li>最简单的做法  !!数据  就可以了</li></ul></li></ol><p>补充：<br>(代表空、否定的值)会被转换为false：0,’’,NaN,undefined,null</p><h2 id="将数字转换为字符串"><a href="#将数字转换为字符串" class="headerlink" title="将数字转换为字符串"></a>将数字转换为字符串</h2><p>全局方法 <strong>String()</strong> 可以将数字转换为字符串。</p><p>该方法可用于任何类型的数字，字母，变量，表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String(x)         // 将变量 x 转换为字符串并返回</span><br><span class="line">String(123)       // 将数字 123 转换为字符串并返回</span><br><span class="line">String(100 + 23)  // 将数字表达式转换为字符串并返回</span><br></pre></td></tr></table></figure><p>尝试一下 »</p><p>Number 方法 <strong>toString()</strong> 也是有同样的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.toString()</span><br><span class="line">(123).toString()</span><br><span class="line">(100 + 23).toString()</span><br></pre></td></tr></table></figure><p>尝试一下 »</p><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-number.html">Number 方法</a> 章节中，你可以找到更多数字转换为字符串的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toExponential()</td><td>把对象的值转换为指数计数法。</td></tr><tr><td>toFixed()</td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td>toPrecision()</td><td>把数字格式化为指定的长度。</td></tr></tbody></table><hr><h2 id="将布尔值转换为字符串"><a href="#将布尔值转换为字符串" class="headerlink" title="将布尔值转换为字符串"></a>将布尔值转换为字符串</h2><p>全局方法 <strong>String()</strong> 可以将布尔值转换为字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String(false)        // 返回 &quot;false&quot;</span><br><span class="line">String(true)         // 返回 &quot;true&quot;</span><br><span class="line"></span><br><span class="line">Boolean 方法 **toString()** 也有相同的效果。</span><br><span class="line"></span><br><span class="line">false.toString()     // 返回 &quot;false&quot;</span><br><span class="line">true.toString()      // 返回 &quot;true&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="将日期转换为字符串"><a href="#将日期转换为字符串" class="headerlink" title="将日期转换为字符串"></a>将日期转换为字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Date() 返回字符串。</span><br><span class="line"></span><br><span class="line">Date()      // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><br><span class="line"></span><br><span class="line">全局方法 String() 可以将日期对象转换为字符串。</span><br><span class="line"></span><br><span class="line">String(new Date())      // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><br><span class="line"></span><br><span class="line">Date 方法 **toString()** 也有相同的效果。</span><br><span class="line"></span><br><span class="line">## </span><br><span class="line"></span><br><span class="line">obj = new Date()</span><br><span class="line">obj.toString()   // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span><br></pre></td></tr></table></figure><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-date.html">Date 方法</a> 章节中，你可以查看更多关于日期转换为字符串的函数：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getDate()</td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td>getDay()</td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr></tbody></table><hr><h2 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h2><p>全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p><p>字符串包含数字(如 “3.14”) 转换为数字 (如 3.14).</p><p>空字符串转换为 0。</p><p>其他的字符串会转换为 NaN (不是个数字)。</p><p>在 <a href="https://www.runoob.com/jsref/jsref-obj-number.html">Number 方法</a> 章节中，你可以查看到更多关于字符串转为数字的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>parseFloat()</td><td>解析一个字符串，并返回一个浮点数。</td></tr><tr><td>parseInt()</td><td>解析一个字符串，并返回一个整数。</td></tr></tbody></table><hr><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符 +"></a>一元运算符 +</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">**Operator +** 可用于将变量转换为数字：</span><br><span class="line"></span><br><span class="line">## </span><br><span class="line"></span><br><span class="line">var y = &quot;5&quot;;      // y 是一个字符串</span><br><span class="line">var x = + y;      // x 是一个数字</span><br><span class="line"></span><br><span class="line">尝试一下 »</span><br><span class="line"></span><br><span class="line">如果变量不能转换，它仍然会是一个数字，但值为 NaN (不是一个数字):</span><br><span class="line"></span><br><span class="line">## </span><br><span class="line"></span><br><span class="line">var y = &quot;John&quot;;   // y 是一个字符串</span><br><span class="line">var x = + y;      // x 是一个数字 (NaN)</span><br><span class="line"></span><br><span class="line">尝试一下 »</span><br></pre></td></tr></table></figure><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator">逗号操作符</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a>（<code>,</code>）对两个操作数进行求值并返回最终操作数的值。它常常用在 <code>for</code> 循环中，在每次循环时对多个变量进行更新。</p><p>例如，假如 <code>a</code> 是一个二维数组，每个维度各有10个元素，以下代码利用逗号操作符来同时改变两个变量的值。这段代码的功能是打印出该二维数组的对角线元素的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = [0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">var a = [x, x, x, x, x];</span><br><span class="line"></span><br><span class="line">for (var i = 0, j = 9; i &lt;= j; i++, j--)</span><br><span class="line">  console.log(&#x27;a[&#x27; + i + &#x27;][&#x27; + j + &#x27;]= &#x27; + a[i][j]);</span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#delete">一元操作符</a></h3><p>一元操作符仅对应一个操作数。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h4><p><code>delete</code>操作符，删除一个对象的属性或者一个数组中某一个键值。语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete objectName.property;</span><br><span class="line">delete objectName[index];</span><br><span class="line">delete property; // legal only within a with statement</span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><p><code>objectName</code>是一个对象名，<code>property</code> 是一个已经存在的属性，<code>index</code>是数组中的一个已经存在的键值的索引值。</p><p>第三行的形式只在<code>with</code>声明的状态下是合法的， 从对象中删除一个属性。</p><p>你能使用 <code>delete</code> 删除各种各样的隐式声明， 但是被<code>var</code>声明的除外。</p><p>如果 <code>delete</code> 操作成功，属性或者元素会变成 <code>undefined</code>。如果 <code>delete</code>可行会返回<code>true</code>，如果不成功返回<code>false</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = 42;</span><br><span class="line">var y = 43;</span><br><span class="line">myobj = new Number();</span><br><span class="line">myobj.h = 4;    // create property h</span><br><span class="line">delete x;       // returns true (can delete if declared implicitly)</span><br><span class="line">delete y;       // returns false (cannot delete if declared with var)</span><br><span class="line">delete Math.PI; // returns false (cannot delete predefined properties)</span><br><span class="line">delete myobj.h; // returns true (can delete user-defined properties)</span><br><span class="line">delete myobj;   // returns true (can delete if declared implicitly)</span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><h5 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h5><p>删除数组中的元素时，数组的长度是不变的，例如删除<code>a[3]</code>, <code>a[4]</code>，<code>a[4]``和a[3]</code> 仍然存在变成了<code>undefined</code>。</p><p><code>delete</code> 删除数组中的一个元素，这个元素就不在数组中了。例如，<code>trees[3]</code>被删除，<code>trees[3]</code> 仍然可寻址并返回<code>undefined</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);</span><br><span class="line">delete trees[3];</span><br><span class="line">if (3 in trees) &#123;</span><br><span class="line">  // 不会被执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><p>如果想让数组中存在一个元素但是是<code>undefined</code>值，使用<code>undefined</code>关键字而不是<code>delete</code>操作. 如下： <code>trees[3]分配一个undefined</code>,但是这个数组元素仍然存在:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);</span><br><span class="line">trees[3] = undefined;</span><br><span class="line">if (3 in trees) &#123;</span><br><span class="line">  // this gets executed（会被执行）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="将布尔值转换为数字"><a href="#将布尔值转换为数字" class="headerlink" title="将布尔值转换为数字"></a>将布尔值转换为数字</h2><p>全局方法 <strong>Number()</strong> 可将布尔值转换为数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number(false)     // 返回 0</span><br><span class="line">Number(true)      // 返回 1</span><br></pre></td></tr></table></figure><hr><h2 id="将日期转换为数字"><a href="#将日期转换为数字" class="headerlink" title="将日期转换为数字"></a>将日期转换为数字</h2><p>全局方法 <strong>Number()</strong> 可将日期转换为数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = new Date();</span><br><span class="line">Number(d)          // 返回 1404568027739</span><br></pre></td></tr></table></figure><p>日期方法 <strong>getTime()</strong> 也有相同的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = new Date();</span><br><span class="line">d.getTime()        // 返回 1404568027739</span><br></pre></td></tr></table></figure><hr><h2 id="自动转换类型"><a href="#自动转换类型" class="headerlink" title="自动转换类型"></a>自动转换类型</h2><p>当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型。</p><p>以下输出结果不是你所期望的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5 + null    // 返回 5         null 转换为 0</span><br><span class="line">&quot;5&quot; + null  // 返回&quot;5null&quot;   null 转换为 &quot;null&quot;</span><br><span class="line">&quot;5&quot; + 1     // 返回 &quot;51&quot;      1 转换为 &quot;1&quot; </span><br><span class="line">&quot;5&quot; - 1     // 返回 4         &quot;5&quot; 转换为 5</span><br></pre></td></tr></table></figure><hr><h2 id="自动转换为字符串"><a href="#自动转换为字符串" class="headerlink" title="自动转换为字符串"></a>自动转换为字符串</h2><p>当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = myVar;</span><br><span class="line"></span><br><span class="line">myVar = &#123;name:&quot;Fjohn&quot;&#125;  // toString 转换为 &quot;[object Object]&quot;</span><br><span class="line">myVar = [1,2,3,4]       // toString 转换为 &quot;1,2,3,4&quot;</span><br><span class="line">myVar = new Date()      // toString 转换为 &quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;</span><br></pre></td></tr></table></figure><p>数字和布尔值也经常相互转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myVar = 123             // toString 转换为 &quot;123&quot;</span><br><span class="line">myVar = true            // toString 转换为 &quot;true&quot;</span><br><span class="line">myVar = false           // toString 转换为 &quot;false&quot;</span><br></pre></td></tr></table></figure><p>下表展示了使用不同的数值转换为数字(Number), 字符串(String), 布尔值(Boolean):</p><table><thead><tr><th align="center">原始值</th><th align="center">转换为数字</th><th align="center">转换为字符串</th><th align="center">转换为布尔值</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">false</td><td align="center">0</td><td align="center">“false”</td><td align="center">false</td><td align="center"></td></tr><tr><td align="center">true</td><td align="center">1</td><td align="center">“true”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_true">尝试一下 »</a></td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">“0”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_number_0">尝试一下 »</a></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_number_1">尝试一下 »</a></td></tr><tr><td align="center">“0”</td><td align="center">0</td><td align="center">“0”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_0">尝试一下 »</a></td></tr><tr><td align="center">“000”</td><td align="center">0</td><td align="center">“000”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_000">尝试一下 »</a></td></tr><tr><td align="center">“1”</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_1">尝试一下 »</a></td></tr><tr><td align="center">NaN</td><td align="center">NaN</td><td align="center">“NaN”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_nan">尝试一下 »</a></td></tr><tr><td align="center">Infinity</td><td align="center">Infinity</td><td align="center">“Infinity”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_infinity">尝试一下 »</a></td></tr><tr><td align="center">-Infinity</td><td align="center">-Infinity</td><td align="center">“-Infinity”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_infinity_minus">尝试一下 »</a></td></tr><tr><td align="center">“”</td><td align="center">0</td><td align="center">“”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_empty">尝试一下 »</a></td></tr><tr><td align="center">“20”</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_number">尝试一下 »</a></td></tr><tr><td align="center">“Runoob”</td><td align="center">NaN</td><td align="center">“Runoob”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_string_text">尝试一下 »</a></td></tr><tr><td align="center">[ ]</td><td align="center">0</td><td align="center">“”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_empty">尝试一下 »</a></td></tr><tr><td align="center">[20]</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_one_number">尝试一下 »</a></td></tr><tr><td align="center">[10,20]</td><td align="center">NaN</td><td align="center">“10,20”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_two_numbers">尝试一下 »</a></td></tr><tr><td align="center">[“Runoob”]</td><td align="center">NaN</td><td align="center">“Runoob”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_one_string">尝试一下 »</a></td></tr><tr><td align="center">[“Runoob”,”Google”]</td><td align="center">NaN</td><td align="center">“Runoob,Google”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_array_two_strings">尝试一下 »</a></td></tr><tr><td align="center">function(){}</td><td align="center">NaN</td><td align="center">“function(){}”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_function">尝试一下 »</a></td></tr><tr><td align="center">{ }</td><td align="center">NaN</td><td align="center">“[object Object]”</td><td align="center">true</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_object">尝试一下 »</a></td></tr><tr><td align="center">null</td><td align="center">0</td><td align="center">“null”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_null">尝试一下 »</a></td></tr><tr><td align="center">undefined</td><td align="center">NaN</td><td align="center">“undefined”</td><td align="center">false</td><td align="center"><a href="https://www.runoob.com/try/try.php?filename=tryjs_type_convert_undefined">尝试一下 »</a></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
